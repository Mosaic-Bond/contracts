/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  DIAOracle,
  DIAOracleInterface,
} from "../../../../../contracts/utils/oracle/DIAOracle.sol/DIAOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_diaOracle",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "assets",
        type: "address[]",
      },
      {
        internalType: "string[]",
        name: "sources",
        type: "string[]",
      },
      {
        internalType: "address",
        name: "fallbackOracle",
        type: "address",
      },
      {
        internalType: "address",
        name: "baseCurrency",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "baseCurrencyUnit",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "source",
        type: "string",
      },
    ],
    name: "AssetSourceUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "baseCurrency",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "baseCurrencyUnit",
        type: "uint256",
      },
    ],
    name: "BaseCurrencySet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "fallbackOracle",
        type: "address",
      },
    ],
    name: "FallbackOracleUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "BASE_CURRENCY",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "BASE_CURRENCY_UNIT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "diaOracle",
    outputs: [
      {
        internalType: "contract IDIAOracleV2",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "getAssetPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "assets",
        type: "address[]",
      },
    ],
    name: "getAssetsPrices",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getFallbackOracle",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "getSourceOfAsset",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "assets",
        type: "address[]",
      },
      {
        internalType: "string[]",
        name: "sources",
        type: "string[]",
      },
    ],
    name: "setAssetSources",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "fallbackOracle",
        type: "address",
      },
    ],
    name: "setFallbackOracle",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e06040523480156200001157600080fd5b506040516200166d3803806200166d83398101604081905262000034916200045f565b6200003f33620000b6565b6001600160a01b038616608052620000578362000106565b62000063858562000150565b6001600160a01b03821660a081905260c08290526040518281527fe27c4c1372396a3d15a9922f74f9dfc7c72b1ad6d63868470787249c356454c19060200160405180910390a250505050505062000727565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb90600090a250565b8051825114620001995760405162461bcd60e51b815260206004820152601060248201526f1253959053125117d05491d55351539560821b604482015260640160405180910390fd5b60005b8251811015620002ae57818181518110620001bb57620001bb62000571565b602002602001015160016000858481518110620001dc57620001dc62000571565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020908162000212919062000615565b5081818151811062000228576200022862000571565b60200260200101516040516200023f9190620006e1565b60405180910390208382815181106200025c576200025c62000571565b60200260200101516001600160a01b03167fb3d3828022bef305e83964615bd3414d3b23667ff75f905fd5416ecffba1a03c60405160405180910390a380620002a581620006ff565b9150506200019c565b505050565b80516001600160a01b0381168114620002cb57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620003115762000311620002d0565b604052919050565b60006001600160401b03821115620003355762000335620002d0565b5060051b60200190565b60005b838110156200035c57818101518382015260200162000342565b50506000910152565b6000601f83818401126200037857600080fd5b82516020620003916200038b8362000319565b620002e6565b82815260059290921b85018101918181019087841115620003b157600080fd5b8287015b84811015620004535780516001600160401b0380821115620003d75760008081fd5b818a0191508a603f830112620003ed5760008081fd5b85820151604082821115620004065762000406620002d0565b62000419828b01601f19168901620002e6565b92508183528c81838601011115620004315760008081fd5b62000442828985018387016200033f565b5050845250918301918301620003b5565b50979650505050505050565b60008060008060008060c087890312156200047957600080fd5b6200048487620002b3565b602088810151919750906001600160401b0380821115620004a457600080fd5b818a0191508a601f830112620004b957600080fd5b8151620004ca6200038b8262000319565b81815260059190911b8301840190848101908d831115620004ea57600080fd5b938501935b8285101562000513576200050385620002b3565b82529385019390850190620004ef565b60408d0151909a5094505050808311156200052d57600080fd5b50506200053d89828a0162000365565b9450506200054e60608801620002b3565b92506200055e60808801620002b3565b915060a087015190509295509295509295565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200059c57607f821691505b602082108103620005bd57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002ae57600081815260208120601f850160051c81016020861015620005ec5750805b601f850160051c820191505b818110156200060d57828155600101620005f8565b505050505050565b81516001600160401b03811115620006315762000631620002d0565b620006498162000642845462000587565b84620005c3565b602080601f831160018114620006815760008415620006685750858301515b600019600386901b1c1916600185901b1785556200060d565b600085815260208120601f198616915b82811015620006b25788860151825594840194600190910190840162000691565b5085821015620006d15787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251620006f58184602087016200033f565b9190910192915050565b6000600182016200072057634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05160c051610f026200076b6000396000818161016301526104f20152600081816101fc01526104b801526000818160f301526105c80152610f026000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80638da5cb5b11610081578063b3596f071161005b578063b3596f07146101e4578063e19f4700146101f7578063f2fde38b1461021e57600080fd5b80638da5cb5b1461019357806392bf2be0146101a45780639d23d9f2146101c457600080fd5b806364bb7dce116100b257806364bb7dce14610143578063715018a6146101565780638c89b64f1461015e57600080fd5b8063170aee73146100d95780632ce773cd146100ee5780636210308c14610132575b600080fd5b6100ec6100e73660046109e6565b610231565b005b6101157f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6002546001600160a01b0316610115565b6100ec610151366004610a5b565b610245565b6100ec61029b565b6101857f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610129565b6000546001600160a01b0316610115565b6101b76101b23660046109e6565b6102af565b6040516101299190610aeb565b6101d76101d2366004610b1e565b61035b565b6040516101299190610b60565b6101856101f23660046109e6565b610410565b6101157f000000000000000000000000000000000000000000000000000000000000000081565b6100ec61022c3660046109e6565b6106ef565b610239610781565b610242816107db565b50565b61024d610781565b6102958484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506102909250859150869050610beb565b610832565b50505050565b6102a3610781565b6102ad6000610989565b565b6001600160a01b03811660009081526001602052604090208054606091906102d690610cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461030290610cc0565b801561034f5780601f106103245761010080835404028352916020019161034f565b820191906000526020600020905b81548152906001019060200180831161033257829003601f168201915b50505050509050919050565b606060008267ffffffffffffffff81111561037857610378610ba4565b6040519080825280602002602001820160405280156103a1578160200160208202803683370190505b50905060005b83811015610408576103d98585838181106103c4576103c4610cf4565b90506020020160208101906101f291906109e6565b8282815181106103eb576103eb610cf4565b60209081029190910101528061040081610d0a565b9150506103a7565b509392505050565b6001600160a01b0381166000908152600160205260408120805482919061043690610cc0565b80601f016020809104026020016040519081016040528092919081815260200182805461046290610cc0565b80156104af5780601f10610484576101008083540402835291602001916104af565b820191906000526020600020905b81548152906001019060200180831161049257829003601f168201915b505050505090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b03160361051757507f000000000000000000000000000000000000000000000000000000000000000092915050565b80516000036105955760025460405163b3596f0760e01b81526001600160a01b0385811660048301529091169063b3596f0790602401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190610d31565b9392505050565b6040517f960384a00000000000000000000000000000000000000000000000000000000081526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063960384a0906105fd908590600401610aeb565b60408051808303816000875af115801561061b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063f9190610d6f565b5090506fffffffffffffffffffffffffffffffff811615610673576fffffffffffffffffffffffffffffffff169392505050565b60025460405163b3596f0760e01b81526001600160a01b0386811660048301529091169063b3596f0790602401602060405180830381865afa1580156106bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e19190610d31565b949350505050565b50919050565b6106f7610781565b6001600160a01b0381166107785760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61024281610989565b6000546001600160a01b031633146102ad5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161076f565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517fce7a780d33665b1ea097af5f155e3821b809ecbaa839d3b33aa83ba28168cefb90600090a250565b80518251146108835760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f415247554d454e5400000000000000000000000000000000604482015260640161076f565b60005b8251811015610984578181815181106108a1576108a1610cf4565b6020026020010151600160008584815181106108bf576108bf610cf4565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002090816108f39190610df0565b5081818151811061090657610906610cf4565b602002602001015160405161091b9190610eb0565b604051809103902083828151811061093557610935610cf4565b60200260200101516001600160a01b03167fb3d3828022bef305e83964615bd3414d3b23667ff75f905fd5416ecffba1a03c60405160405180910390a38061097c81610d0a565b915050610886565b505050565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156109f857600080fd5b81356001600160a01b038116811461058e57600080fd5b60008083601f840112610a2157600080fd5b50813567ffffffffffffffff811115610a3957600080fd5b6020830191508360208260051b8501011115610a5457600080fd5b9250929050565b60008060008060408587031215610a7157600080fd5b843567ffffffffffffffff80821115610a8957600080fd5b610a9588838901610a0f565b90965094506020870135915080821115610aae57600080fd5b50610abb87828801610a0f565b95989497509550505050565b60005b83811015610ae2578181015183820152602001610aca565b50506000910152565b6020815260008251806020840152610b0a816040850160208701610ac7565b601f01601f19169190910160400192915050565b60008060208385031215610b3157600080fd5b823567ffffffffffffffff811115610b4857600080fd5b610b5485828601610a0f565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b81811015610b9857835183529284019291840191600101610b7c565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610be357610be3610ba4565b604052919050565b600067ffffffffffffffff80841115610c0657610c06610ba4565b8360051b6020610c17818301610bba565b868152918501918181019036841115610c2f57600080fd5b865b84811015610cb457803586811115610c495760008081fd5b8801601f3681830112610c5c5760008081fd5b813588811115610c6e57610c6e610ba4565b610c7f818301601f19168801610bba565b91508082523687828501011115610c965760008081fd5b80878401888401376000908201870152845250918301918301610c31565b50979650505050505050565b600181811c90821680610cd457607f821691505b6020821081036106e957634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600060018201610d2a57634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215610d4357600080fd5b5051919050565b80516fffffffffffffffffffffffffffffffff81168114610d6a57600080fd5b919050565b60008060408385031215610d8257600080fd5b610d8b83610d4a565b9150610d9960208401610d4a565b90509250929050565b601f82111561098457600081815260208120601f850160051c81016020861015610dc95750805b601f850160051c820191505b81811015610de857828155600101610dd5565b505050505050565b815167ffffffffffffffff811115610e0a57610e0a610ba4565b610e1e81610e188454610cc0565b84610da2565b602080601f831160018114610e535760008415610e3b5750858301515b600019600386901b1c1916600185901b178555610de8565b600085815260208120601f198616915b82811015610e8257888601518255948401946001909101908401610e63565b5085821015610ea05787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008251610ec2818460208701610ac7565b919091019291505056fea2646970667358221220928e05c0ebd670c232f808309b82caa7227092418f4d2bd8dbb5f40c802827a964736f6c63430008130033";

type DIAOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DIAOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DIAOracle__factory extends ContractFactory {
  constructor(...args: DIAOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _diaOracle: PromiseOrValue<string>,
    assets: PromiseOrValue<string>[],
    sources: PromiseOrValue<string>[],
    fallbackOracle: PromiseOrValue<string>,
    baseCurrency: PromiseOrValue<string>,
    baseCurrencyUnit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DIAOracle> {
    return super.deploy(
      _diaOracle,
      assets,
      sources,
      fallbackOracle,
      baseCurrency,
      baseCurrencyUnit,
      overrides || {}
    ) as Promise<DIAOracle>;
  }
  override getDeployTransaction(
    _diaOracle: PromiseOrValue<string>,
    assets: PromiseOrValue<string>[],
    sources: PromiseOrValue<string>[],
    fallbackOracle: PromiseOrValue<string>,
    baseCurrency: PromiseOrValue<string>,
    baseCurrencyUnit: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _diaOracle,
      assets,
      sources,
      fallbackOracle,
      baseCurrency,
      baseCurrencyUnit,
      overrides || {}
    );
  }
  override attach(address: string): DIAOracle {
    return super.attach(address) as DIAOracle;
  }
  override connect(signer: Signer): DIAOracle__factory {
    return super.connect(signer) as DIAOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DIAOracleInterface {
    return new utils.Interface(_abi) as DIAOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DIAOracle {
    return new Contract(address, _abi, signerOrProvider) as DIAOracle;
  }
}
