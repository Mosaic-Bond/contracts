/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../../../common";
import type {
  MockReentrantInitializableImple,
  MockReentrantInitializableImpleInterface,
} from "../../../../../../../../contracts/lend/aave-core-v3/contracts/mocks/upgradeability/MockInitializableImplementation.sol/MockReentrantInitializableImple";

const _abi = [
  {
    inputs: [],
    name: "REVISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "val",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "value",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b50610210806100246000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633fa4f24514610046578063dde43cba14610061578063fe4b84df14610069575b600080fd5b61004f60345481565b60405190815260200160405180910390f35b61004f600281565b61007c610077366004610182565b61007e565b005b60015460029060ff16806100915750303b155b8061009d575060005481115b61012d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a6564000000000000000000000000000000000000606482015260840160405180910390fd5b60015460ff1615801561014c576001805460ff19168117905560008290555b6034839055600283101561016c5761016c6034546001610077919061019b565b801561017d576001805460ff191690555b505050565b60006020828403121561019457600080fd5b5035919050565b600082198211156101d5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220c876ae2a0224f27b208e8da7c8c6072da00b6a0ef0c08aa5660a3d03484f387464736f6c634300080a0033";

type MockReentrantInitializableImpleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockReentrantInitializableImpleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockReentrantInitializableImple__factory extends ContractFactory {
  constructor(...args: MockReentrantInitializableImpleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockReentrantInitializableImple> {
    return super.deploy(
      overrides || {}
    ) as Promise<MockReentrantInitializableImple>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockReentrantInitializableImple {
    return super.attach(address) as MockReentrantInitializableImple;
  }
  override connect(signer: Signer): MockReentrantInitializableImple__factory {
    return super.connect(signer) as MockReentrantInitializableImple__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockReentrantInitializableImpleInterface {
    return new utils.Interface(
      _abi
    ) as MockReentrantInitializableImpleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockReentrantInitializableImple {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockReentrantInitializableImple;
  }
}
