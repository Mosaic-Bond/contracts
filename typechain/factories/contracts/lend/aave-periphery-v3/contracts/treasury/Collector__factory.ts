/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  Collector,
  CollectorInterface,
} from "../../../../../../contracts/lend/aave-periphery-v3/contracts/treasury/Collector";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "fundsAdmin",
        type: "address",
      },
    ],
    name: "NewFundsAdmin",
    type: "event",
  },
  {
    inputs: [],
    name: "REVISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getFundsAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "reserveController",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
    ],
    name: "setFundsAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC20",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b506104fc806100246000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063dde43cba11610050578063dde43cba146100bf578063e1f21c67146100d5578063ed0d2371146100e857600080fd5b806306bc2ee014610077578063beabacc814610097578063c4d66de8146100ac575b600080fd5b6034546040516001600160a01b0390911681526020015b60405180910390f35b6100aa6100a536600461043f565b6100fb565b005b6100aa6100ba366004610480565b6101ed565b6100c7600181565b60405190815260200161008e565b6100aa6100e336600461043f565b6102ba565b6100aa6100f6366004610480565b610362565b6034546001600160a01b0316331461015a5760405162461bcd60e51b815260206004820152601360248201527f4f4e4c595f42595f46554e44535f41444d494e0000000000000000000000000060448201526064015b60405180910390fd5b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820183905284169063a9059cbb906044015b6020604051808303816000875af11580156101c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101e791906104a4565b50505050565b6001805460ff16806101fe5750303b155b8061020a575060005481115b61027c5760405162461bcd60e51b815260206004820152602e60248201527f436f6e747261637420696e7374616e63652068617320616c726561647920626560448201527f656e20696e697469616c697a65640000000000000000000000000000000000006064820152608401610151565b60015460ff1615801561029b576001805460ff19168117905560008290555b6102a4836103c8565b80156102b5576001805460ff191690555b505050565b6034546001600160a01b031633146103145760405162461bcd60e51b815260206004820152601360248201527f4f4e4c595f42595f46554e44535f41444d494e000000000000000000000000006044820152606401610151565b6040517f095ea7b30000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820183905284169063095ea7b3906044016101a4565b6034546001600160a01b031633146103bc5760405162461bcd60e51b815260206004820152601360248201527f4f4e4c595f42595f46554e44535f41444d494e000000000000000000000000006044820152606401610151565b6103c5816103c8565b50565b603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0383169081179091556040517f1ab77a654795da4cfe37c33188e862203ade9a5c7f1a9d4957669b3ccbec9e1190600090a250565b6001600160a01b03811681146103c557600080fd5b60008060006060848603121561045457600080fd5b833561045f8161042a565b9250602084013561046f8161042a565b929592945050506040919091013590565b60006020828403121561049257600080fd5b813561049d8161042a565b9392505050565b6000602082840312156104b657600080fd5b8151801515811461049d57600080fdfea264697066735822122034b8de34f3b32391d8c06d8c43217e47eae30b0cac9216a4e68d9c3cb59c6f9f64736f6c634300080a0033";

type CollectorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CollectorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Collector__factory extends ContractFactory {
  constructor(...args: CollectorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Collector> {
    return super.deploy(overrides || {}) as Promise<Collector>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Collector {
    return super.attach(address) as Collector;
  }
  override connect(signer: Signer): Collector__factory {
    return super.connect(signer) as Collector__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CollectorInterface {
    return new utils.Interface(_abi) as CollectorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Collector {
    return new Contract(address, _abi, signerOrProvider) as Collector;
  }
}
