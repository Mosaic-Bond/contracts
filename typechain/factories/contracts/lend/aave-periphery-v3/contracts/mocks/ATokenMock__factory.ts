/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../common";
import type {
  ATokenMock,
  ATokenMockInterface,
} from "../../../../../../contracts/lend/aave-periphery-v3/contracts/mocks/ATokenMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IRewardsController",
        name: "aic",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "decimals",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "assetIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "userIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "rewardsAccrued",
        type: "uint256",
      },
    ],
    name: "Accrued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "reward",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "emission",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "distributionEnd",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "assetIndex",
        type: "uint256",
      },
    ],
    name: "AssetConfigUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "_aic",
    outputs: [
      {
        internalType: "contract IRewardsController",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "cleanUserState",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "userBalance",
        type: "uint256",
      },
    ],
    name: "doubleHandleActionOnAic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getScaledUserBalanceAndSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "userBalance",
        type: "uint256",
      },
    ],
    name: "handleActionOnAic",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "scaledTotalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "userBalance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
    ],
    name: "setUserBalanceAndSupply",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161042338038061042383398101604081905261002f91610058565b600080546001600160a01b0319166001600160a01b039390931692909217909155608052610092565b6000806040838503121561006b57600080fd5b82516001600160a01b038116811461008257600080fd5b6020939093015192949293505050565b6080516103776100ac600039600060ef01526103776000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80638d27929411610076578063b39944ba1161005b578063b39944ba1461013b578063b41c6f981461014a578063f794ca511461017557600080fd5b80638d27929414610128578063b1bf962d146100db57600080fd5b80630afbcdc9146100a857806318160ddd146100db578063313ce567146100ed57806334743e7c14610113575b600080fd5b6100c16100b63660046102ca565b506001546002549091565b604080519283526020830191909152015b60405180910390f35b6002545b6040519081526020016100d2565b7f00000000000000000000000000000000000000000000000000000000000000006100df565b6101266101213660046102ec565b61018e565b005b6101266101363660046102ec565b610201565b61012660006001819055600255565b60005461015d906001600160a01b031681565b6040516001600160a01b0390911681526020016100d2565b61012661018336600461031f565b600191909155600255565b6000546040516318c39f1760e11b81526001600160a01b0385811660048301526024820185905260448201849052909116906331873e2e906064015b600060405180830381600087803b1580156101e457600080fd5b505af11580156101f8573d6000803e3d6000fd5b50505050505050565b6000546040516318c39f1760e11b81526001600160a01b0385811660048301526024820185905260448201849052909116906331873e2e90606401600060405180830381600087803b15801561025657600080fd5b505af115801561026a573d6000803e3d6000fd5b50506000546040516318c39f1760e11b81526001600160a01b038781166004830152602482018790526044820186905290911692506331873e2e91506064016101ca565b80356001600160a01b03811681146102c557600080fd5b919050565b6000602082840312156102dc57600080fd5b6102e5826102ae565b9392505050565b60008060006060848603121561030157600080fd5b61030a846102ae565b95602085013595506040909401359392505050565b6000806040838503121561033257600080fd5b5050803592602090910135915056fea2646970667358221220c00665ed9377cc5a4bd81be22f1eef89c7b7c0a42194d1aae7be757d427ed09864736f6c63430008130033";

type ATokenMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ATokenMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ATokenMock__factory extends ContractFactory {
  constructor(...args: ATokenMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    aic: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ATokenMock> {
    return super.deploy(aic, decimals, overrides || {}) as Promise<ATokenMock>;
  }
  override getDeployTransaction(
    aic: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(aic, decimals, overrides || {});
  }
  override attach(address: string): ATokenMock {
    return super.attach(address) as ATokenMock;
  }
  override connect(signer: Signer): ATokenMock__factory {
    return super.connect(signer) as ATokenMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ATokenMockInterface {
    return new utils.Interface(_abi) as ATokenMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ATokenMock {
    return new Contract(address, _abi, signerOrProvider) as ATokenMock;
  }
}
