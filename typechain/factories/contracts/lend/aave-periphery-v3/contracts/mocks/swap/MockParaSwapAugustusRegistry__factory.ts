/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../../common";
import type {
  MockParaSwapAugustusRegistry,
  MockParaSwapAugustusRegistryInterface,
} from "../../../../../../../contracts/lend/aave-periphery-v3/contracts/mocks/swap/MockParaSwapAugustusRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "augustus",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "augustus",
        type: "address",
      },
    ],
    name: "isValidAugustus",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161018438038061018483398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805160fc6100886000396000603a015260fc6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063fb04e17b14602d575b600080fd5b60776038366004608b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b604051901515815260200160405180910390f35b600060208284031215609c57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811460bf57600080fd5b939250505056fea264697066735822122023dd11274e2f01562befd4348fcc66b984f0a5d112777b9b56218d99e6cc056464736f6c63430008130033";

type MockParaSwapAugustusRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockParaSwapAugustusRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockParaSwapAugustusRegistry__factory extends ContractFactory {
  constructor(...args: MockParaSwapAugustusRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    augustus: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockParaSwapAugustusRegistry> {
    return super.deploy(
      augustus,
      overrides || {}
    ) as Promise<MockParaSwapAugustusRegistry>;
  }
  override getDeployTransaction(
    augustus: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(augustus, overrides || {});
  }
  override attach(address: string): MockParaSwapAugustusRegistry {
    return super.attach(address) as MockParaSwapAugustusRegistry;
  }
  override connect(signer: Signer): MockParaSwapAugustusRegistry__factory {
    return super.connect(signer) as MockParaSwapAugustusRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockParaSwapAugustusRegistryInterface {
    return new utils.Interface(_abi) as MockParaSwapAugustusRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockParaSwapAugustusRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockParaSwapAugustusRegistry;
  }
}
