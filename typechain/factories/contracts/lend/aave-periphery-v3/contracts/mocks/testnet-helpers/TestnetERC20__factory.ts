/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../../../common";
import type {
  TestnetERC20,
  TestnetERC20Interface,
} from "../../../../../../../contracts/lend/aave-periphery-v3/contracts/mocks/testnet-helpers/TestnetERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "decimals",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "EIP712_REVISION",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "PERMIT_TYPEHASH",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "nonces",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200170038038062001700833981016040819052620000349162000434565b8351849084906200004d906003906020850190620002c1565b50805162000063906004906020840190620002c1565b50506005805460ff191660121790555060006200007d3390565b60058054610100600160a81b0319166101006001600160a01b0384169081029190911790915560405191925090600090600080516020620016e0833981519152908290a350835160208086019190912060408051808201825260018152603160f81b9084015280517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f938101939093528201527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6606082015246608082018190523060a08301529060c00160408051808303601f1901815291905280516020909101206007556005805460ff851660ff199091161790556001600160a01b0382166200018857600080fd5b62000193826200019e565b505050505062000515565b6005546001600160a01b03610100909104163314620002045760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b0381166200026b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401620001fb565b6005546040516001600160a01b038084169261010090041690600080516020620016e083398151915290600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b828054620002cf90620004d8565b90600052602060002090601f016020900481019282620002f357600085556200033e565b82601f106200030e57805160ff19168380011785556200033e565b828001600101855582156200033e579182015b828111156200033e57825182559160200191906001019062000321565b506200034c92915062000350565b5090565b5b808211156200034c576000815560010162000351565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200038f57600080fd5b81516001600160401b0380821115620003ac57620003ac62000367565b604051601f8301601f19908116603f01168101908282118183101715620003d757620003d762000367565b81604052838152602092508683858801011115620003f457600080fd5b600091505b83821015620004185785820183015181830184015290820190620003f9565b838211156200042a5760008385830101525b9695505050505050565b600080600080608085870312156200044b57600080fd5b84516001600160401b03808211156200046357600080fd5b62000471888389016200037d565b955060208701519150808211156200048857600080fd5b5062000497878288016200037d565b935050604085015160ff81168114620004af57600080fd5b60608601519092506001600160a01b0381168114620004cd57600080fd5b939692955090935050565b600181811c90821680620004ed57607f821691505b602082108114156200050f57634e487b7160e01b600052602260045260246000fd5b50919050565b6111bb80620005256000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c8063715018a6116100d8578063a0712d681161008c578063d505accf11610066578063d505accf1461034f578063dd62ed3e14610362578063f2fde38b1461039b57600080fd5b8063a0712d6814610316578063a457c2d714610329578063a9059cbb1461033c57600080fd5b80637ecebe00116100bd5780637ecebe00146102bc5780638da5cb5b146102e557806395d89b411461030e57600080fd5b8063715018a614610276578063781603761461028057600080fd5b8063313ce5671161012f5780633950935111610114578063395093511461022757806340c10f191461023a57806370a082311461024d57600080fd5b8063313ce567146102095780633644e5151461021e57600080fd5b806318160ddd1161016057806318160ddd146101bd57806323b872dd146101cf57806330adf81f146101e257600080fd5b806306fdde031461017c578063095ea7b31461019a575b600080fd5b6101846103ae565b6040516101919190610f40565b60405180910390f35b6101ad6101a8366004610f71565b610440565b6040519015158152602001610191565b6002545b604051908152602001610191565b6101ad6101dd366004610f9b565b610457565b6101c17f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60055460405160ff9091168152602001610191565b6101c160075481565b6101ad610235366004610f71565b6104c0565b6101ad610248366004610f71565b6104f6565b6101c161025b366004610fd7565b6001600160a01b031660009081526020819052604090205490565b61027e610568565b005b6101846040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b6101c16102ca366004610fd7565b6001600160a01b031660009081526006602052604090205490565b60055461010090046001600160a01b03166040516001600160a01b039091168152602001610191565b610184610625565b6101ad610324366004610ff2565b610634565b6101ad610337366004610f71565b6106aa565b6101ad61034a366004610f71565b6106f9565b61027e61035d36600461100b565b610706565b6101c161037036600461107e565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b61027e6103a9366004610fd7565b61097a565b6060600380546103bd906110b1565b80601f01602080910402602001604051908101604052809291908181526020018280546103e9906110b1565b80156104365780601f1061040b57610100808354040283529160200191610436565b820191906000526020600020905b81548152906001019060200180831161041957829003601f168201915b5050505050905090565b600061044d338484610aca565b5060015b92915050565b6000610464848484610c23565b6104b684336104b185604051806060016040528060288152602001611139602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190610dd8565b610aca565b5060019392505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161044d9185906104b19086610e05565b6005546000906001600160a01b0361010090910416331461055e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61044d8383610e15565b6005546001600160a01b036101009091041633146105c85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610555565b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36005805474ffffffffffffffffffffffffffffffffffffffff0019169055565b6060600480546103bd906110b1565b6005546000906001600160a01b036101009091041633146106975760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610555565b6106a13383610e15565b5060015b919050565b600061044d33846104b185604051806060016040528060258152602001611161602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190610dd8565b600061044d338484610c23565b6001600160a01b03871661075c5760405162461bcd60e51b815260206004820152600d60248201527f494e56414c49445f4f574e4552000000000000000000000000000000000000006044820152606401610555565b834211156107ac5760405162461bcd60e51b815260206004820152601260248201527f494e56414c49445f45585049524154494f4e00000000000000000000000000006044820152606401610555565b6001600160a01b0387811660008181526006602090815260408083205460075482517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98186015280840196909652958c166060860152608085018b905260a0850181905260c08086018b90528251808703909101815260e08601909252815191909201207f1901000000000000000000000000000000000000000000000000000000000000610100850152610102840194909452610122830193909352906101420160408051601f1981840301815282825280516020918201206000845290830180835281905260ff8816918301919091526060820186905260808201859052915060019060a0016020604051602081039080840390855afa1580156108d6573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b0316146109405760405162461bcd60e51b815260206004820152601160248201527f494e56414c49445f5349474e41545552450000000000000000000000000000006044820152606401610555565b61094b8260016110ec565b6001600160a01b038a1660009081526006602052604090205561096f898989610aca565b505050505050505050565b6005546001600160a01b036101009091041633146109da5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610555565b6001600160a01b038116610a565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610555565b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b039092166101000274ffffffffffffffffffffffffffffffffffffffff0019909216919091179055565b6001600160a01b038316610b455760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b038216610bc15760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f20616464726560448201527f73730000000000000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316610c9f5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610555565b6001600160a01b038216610d1b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201527f65737300000000000000000000000000000000000000000000000000000000006064820152608401610555565b610d5881604051806060016040528060268152602001611113602691396001600160a01b0386166000908152602081905260409020549190610dd8565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610d879082610e05565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101610c16565b8183038184821115610dfd5760405162461bcd60e51b81526004016105559190610f40565b509392505050565b8082018281101561045157600080fd5b6001600160a01b038216610e6b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610555565b600254610e789082610e05565b6002556001600160a01b038216600090815260208190526040902054610e9e9082610e05565b6001600160a01b038316600081815260208181526040808320949094559251848152919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b6000815180845260005b81811015610f1957602081850181015186830182015201610efd565b81811115610f2b576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610f536020830184610ef3565b9392505050565b80356001600160a01b03811681146106a557600080fd5b60008060408385031215610f8457600080fd5b610f8d83610f5a565b946020939093013593505050565b600080600060608486031215610fb057600080fd5b610fb984610f5a565b9250610fc760208501610f5a565b9150604084013590509250925092565b600060208284031215610fe957600080fd5b610f5382610f5a565b60006020828403121561100457600080fd5b5035919050565b600080600080600080600060e0888a03121561102657600080fd5b61102f88610f5a565b965061103d60208901610f5a565b95506040880135945060608801359350608088013560ff8116811461106157600080fd5b9699959850939692959460a0840135945060c09093013592915050565b6000806040838503121561109157600080fd5b61109a83610f5a565b91506110a860208401610f5a565b90509250929050565b600181811c908216806110c557607f821691505b602082108114156110e657634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561110d57634e487b7160e01b600052601160045260246000fd5b50019056fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220f56720b77e2f2a8a4b2913b65af9a26bced58bf3dd3fcdeed50545cd4493d8e864736f6c634300080a00338be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0";

type TestnetERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestnetERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestnetERC20__factory extends ContractFactory {
  constructor(...args: TestnetERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestnetERC20> {
    return super.deploy(
      name,
      symbol,
      decimals,
      owner,
      overrides || {}
    ) as Promise<TestnetERC20>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      decimals,
      owner,
      overrides || {}
    );
  }
  override attach(address: string): TestnetERC20 {
    return super.attach(address) as TestnetERC20;
  }
  override connect(signer: Signer): TestnetERC20__factory {
    return super.connect(signer) as TestnetERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestnetERC20Interface {
    return new utils.Interface(_abi) as TestnetERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestnetERC20 {
    return new Contract(address, _abi, signerOrProvider) as TestnetERC20;
  }
}
