/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IGovernancePowerDelegationToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernancePowerDelegationToken__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "GovernancePowerDelegationERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernancePowerDelegationERC20__factory>;
    getContractFactory(
      name: "AggregatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorInterface__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IAaveIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveIncentivesController__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "IInitializableAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitializableAToken__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProvider__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "IScaledBalanceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScaledBalanceToken__factory>;
    getContractFactory(
      name: "IAaveDistributionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveDistributionManager__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Detailed__factory>;
    getContractFactory(
      name: "IStakedAave",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedAave__factory>;
    getContractFactory(
      name: "ITransferHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferHook__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20WithSnapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WithSnapshot__factory>;
    getContractFactory(
      name: "GovernancePowerWithSnapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernancePowerWithSnapshot__factory>;
    getContractFactory(
      name: "AaveDistributionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveDistributionManager__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "GovernancePowerDelegationERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernancePowerDelegationERC20__factory>;
    getContractFactory(
      name: "GovernancePowerWithSnapshot",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernancePowerWithSnapshot__factory>;
    getContractFactory(
      name: "IAaveDistributionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveDistributionManager__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IGovernancePowerDelegationToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernancePowerDelegationToken__factory>;
    getContractFactory(
      name: "IStakedAave",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedAave__factory>;
    getContractFactory(
      name: "ITransferHook",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferHook__factory>;
    getContractFactory(
      name: "StakedTokenV2Rev3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedTokenV2Rev3__factory>;
    getContractFactory(
      name: "AaveDistributionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveDistributionManager__factory>;
    getContractFactory(
      name: "StakedAave",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedAave__factory>;
    getContractFactory(
      name: "StakedAaveV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedAaveV2__factory>;
    getContractFactory(
      name: "StakedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedToken__factory>;
    getContractFactory(
      name: "StakedTokenV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedTokenV2__factory>;
    getContractFactory(
      name: "IAuthentication",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthentication__factory>;
    getContractFactory(
      name: "ISignaturesValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignaturesValidator__factory>;
    getContractFactory(
      name: "ITemporarilyPausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITemporarilyPausable__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IAuthorizer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAuthorizer__factory>;
    getContractFactory(
      name: "IFlashLoanRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanRecipient__factory>;
    getContractFactory(
      name: "IProtocolFeesCollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProtocolFeesCollector__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IVotesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotesUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1967Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967Upgradeable__factory>;
    getContractFactory(
      name: "IERC3156FlashBorrowerUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashBorrowerUpgradeable__factory>;
    getContractFactory(
      name: "IERC3156FlashLenderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC3156FlashLenderUpgradeable__factory>;
    getContractFactory(
      name: "IERC5267Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267Upgradeable__factory>;
    getContractFactory(
      name: "IERC5805Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5805Upgradeable__factory>;
    getContractFactory(
      name: "IERC6372Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC6372Upgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC20BurnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20BurnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20FlashMintUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20FlashMintUpgradeable__factory>;
    getContractFactory(
      name: "ERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "ERC20VotesUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20VotesUpgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "EIP712Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "MulticallUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MulticallUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Multicall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "IPyth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPyth__factory>;
    getContractFactory(
      name: "IPythEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPythEvents__factory>;
    getContractFactory(
      name: "AggregatorInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AggregatorInterface__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Detailed__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "AdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "BaseAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "BaseUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "UpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeabilityProxy__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "WTLOS9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WTLOS9__factory>;
    getContractFactory(
      name: "ReservesSetupHelper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReservesSetupHelper__factory>;
    getContractFactory(
      name: "FlashLoanReceiverBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLoanReceiverBase__factory>;
    getContractFactory(
      name: "FlashLoanSimpleReceiverBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLoanSimpleReceiverBase__factory>;
    getContractFactory(
      name: "IFlashLoanReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanReceiver__factory>;
    getContractFactory(
      name: "IFlashLoanSimpleReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlashLoanSimpleReceiver__factory>;
    getContractFactory(
      name: "IAaveIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveIncentivesController__factory>;
    getContractFactory(
      name: "IAaveOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveOracle__factory>;
    getContractFactory(
      name: "IACLManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IACLManager__factory>;
    getContractFactory(
      name: "IAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAToken__factory>;
    getContractFactory(
      name: "ICreditDelegationToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICreditDelegationToken__factory>;
    getContractFactory(
      name: "IDefaultInterestRateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDefaultInterestRateStrategy__factory>;
    getContractFactory(
      name: "IDelegationToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDelegationToken__factory>;
    getContractFactory(
      name: "IERC20WithPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20WithPermit__factory>;
    getContractFactory(
      name: "IInitializableAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitializableAToken__factory>;
    getContractFactory(
      name: "IInitializableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInitializableDebtToken__factory>;
    getContractFactory(
      name: "IL2Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2Pool__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProvider__factory>;
    getContractFactory(
      name: "IPoolAddressesProviderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolAddressesProviderRegistry__factory>;
    getContractFactory(
      name: "IPoolConfigurator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolConfigurator__factory>;
    getContractFactory(
      name: "IPoolDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolDataProvider__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "IPriceOracleGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracleGetter__factory>;
    getContractFactory(
      name: "IPriceOracleSentinel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracleSentinel__factory>;
    getContractFactory(
      name: "IReserveInterestRateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReserveInterestRateStrategy__factory>;
    getContractFactory(
      name: "IScaledBalanceToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IScaledBalanceToken__factory>;
    getContractFactory(
      name: "ISequencerOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISequencerOracle__factory>;
    getContractFactory(
      name: "IStableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStableDebtToken__factory>;
    getContractFactory(
      name: "IVariableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVariableDebtToken__factory>;
    getContractFactory(
      name: "IRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouter__factory>;
    getContractFactory(
      name: "Liquidation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Liquidation__factory>;
    getContractFactory(
      name: "Liquidation2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Liquidation2__factory>;
    getContractFactory(
      name: "IRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouter__factory>;
    getContractFactory(
      name: "SynthLiquidation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SynthLiquidation__factory>;
    getContractFactory(
      name: "AaveOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveOracle__factory>;
    getContractFactory(
      name: "AaveProtocolDataProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveProtocolDataProvider__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "L2Encoder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.L2Encoder__factory>;
    getContractFactory(
      name: "MockFlashLoanReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFlashLoanReceiver__factory>;
    getContractFactory(
      name: "MockFlashLoanSimpleReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockFlashLoanSimpleReceiver__factory>;
    getContractFactory(
      name: "MockIncentivesController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockIncentivesController__factory>;
    getContractFactory(
      name: "MockPeripheryContractV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPeripheryContractV1__factory>;
    getContractFactory(
      name: "MockPeripheryContractV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPeripheryContractV2__factory>;
    getContractFactory(
      name: "MockReserveConfiguration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockReserveConfiguration__factory>;
    getContractFactory(
      name: "SelfdestructTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelfdestructTransfer__factory>;
    getContractFactory(
      name: "MockAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAggregator__factory>;
    getContractFactory(
      name: "SequencerOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SequencerOracle__factory>;
    getContractFactory(
      name: "FlashloanAttacker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashloanAttacker__factory>;
    getContractFactory(
      name: "MockReserveInterestRateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockReserveInterestRateStrategy__factory>;
    getContractFactory(
      name: "WadRayMathWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WadRayMathWrapper__factory>;
    getContractFactory(
      name: "MintableDelegationERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableDelegationERC20__factory>;
    getContractFactory(
      name: "MintableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableERC20__factory>;
    getContractFactory(
      name: "MockATokenRepayment",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockATokenRepayment__factory>;
    getContractFactory(
      name: "WETH9Mocked",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9Mocked__factory>;
    getContractFactory(
      name: "MockAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAToken__factory>;
    getContractFactory(
      name: "MockInitializableFromConstructorImple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockInitializableFromConstructorImple__factory>;
    getContractFactory(
      name: "MockInitializableImple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockInitializableImple__factory>;
    getContractFactory(
      name: "MockInitializableImpleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockInitializableImpleV2__factory>;
    getContractFactory(
      name: "MockReentrantInitializableImple",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockReentrantInitializableImple__factory>;
    getContractFactory(
      name: "MockStableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockStableDebtToken__factory>;
    getContractFactory(
      name: "MockVariableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVariableDebtToken__factory>;
    getContractFactory(
      name: "ACLManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ACLManager__factory>;
    getContractFactory(
      name: "PoolAddressesProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolAddressesProvider__factory>;
    getContractFactory(
      name: "PoolAddressesProviderRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolAddressesProviderRegistry__factory>;
    getContractFactory(
      name: "PriceOracleSentinel",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracleSentinel__factory>;
    getContractFactory(
      name: "BaseImmutableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseImmutableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "InitializableImmutableAdminUpgradeabilityProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitializableImmutableAdminUpgradeabilityProxy__factory>;
    getContractFactory(
      name: "ReserveConfiguration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveConfiguration__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "BorrowLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BorrowLogic__factory>;
    getContractFactory(
      name: "BridgeLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeLogic__factory>;
    getContractFactory(
      name: "ConfiguratorLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfiguratorLogic__factory>;
    getContractFactory(
      name: "EModeLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EModeLogic__factory>;
    getContractFactory(
      name: "FlashLoanLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FlashLoanLogic__factory>;
    getContractFactory(
      name: "IsolationModeLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IsolationModeLogic__factory>;
    getContractFactory(
      name: "LiquidationLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LiquidationLogic__factory>;
    getContractFactory(
      name: "PoolLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolLogic__factory>;
    getContractFactory(
      name: "ReserveLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReserveLogic__factory>;
    getContractFactory(
      name: "SupplyLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SupplyLogic__factory>;
    getContractFactory(
      name: "ValidationLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValidationLogic__factory>;
    getContractFactory(
      name: "DefaultReserveInterestRateStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefaultReserveInterestRateStrategy__factory>;
    getContractFactory(
      name: "Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: "PoolConfigurator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolConfigurator__factory>;
    getContractFactory(
      name: "PoolStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolStorage__factory>;
    getContractFactory(
      name: "AToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AToken__factory>;
    getContractFactory(
      name: "DebtTokenBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DebtTokenBase__factory>;
    getContractFactory(
      name: "EIP712Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712Base__factory>;
    getContractFactory(
      name: "IncentivizedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IncentivizedERC20__factory>;
    getContractFactory(
      name: "MintableIncentivizedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableIncentivizedERC20__factory>;
    getContractFactory(
      name: "ScaledBalanceTokenBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ScaledBalanceTokenBase__factory>;
    getContractFactory(
      name: "DelegationAwareAToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DelegationAwareAToken__factory>;
    getContractFactory(
      name: "StableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StableDebtToken__factory>;
    getContractFactory(
      name: "VariableDebtToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VariableDebtToken__factory>;
    getContractFactory(
      name: "IEACAggregatorProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEACAggregatorProxy__factory>;
    getContractFactory(
      name: "IERC20DetailedBytes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20DetailedBytes__factory>;
    getContractFactory(
      name: "IUiIncentiveDataProviderV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUiIncentiveDataProviderV3__factory>;
    getContractFactory(
      name: "IUiPoolDataProviderV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUiPoolDataProviderV3__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "IWrappedTokenGatewayV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWrappedTokenGatewayV3__factory>;
    getContractFactory(
      name: "UiIncentiveDataProviderV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UiIncentiveDataProviderV3__factory>;
    getContractFactory(
      name: "UiPoolDataProviderV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UiPoolDataProviderV3__factory>;
    getContractFactory(
      name: "WalletBalanceProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WalletBalanceProvider__factory>;
    getContractFactory(
      name: "WrappedTokenGatewayV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WrappedTokenGatewayV3__factory>;
    getContractFactory(
      name: "ATokenMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ATokenMock__factory>;
    getContractFactory(
      name: "SelfdestructTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SelfdestructTransfer__factory>;
    getContractFactory(
      name: "MockBadTransferStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBadTransferStrategy__factory>;
    getContractFactory(
      name: "Faucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Faucet__factory>;
    getContractFactory(
      name: "IFaucet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFaucet__factory>;
    getContractFactory(
      name: "TestnetERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestnetERC20__factory>;
    getContractFactory(
      name: "WETH9Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9Mock__factory>;
    getContractFactory(
      name: "EmissionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EmissionManager__factory>;
    getContractFactory(
      name: "IEmissionManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IEmissionManager__factory>;
    getContractFactory(
      name: "IPullRewardsTransferStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPullRewardsTransferStrategy__factory>;
    getContractFactory(
      name: "IRewardsController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsController__factory>;
    getContractFactory(
      name: "IRewardsDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsDistributor__factory>;
    getContractFactory(
      name: "IStakedToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedToken__factory>;
    getContractFactory(
      name: "IStakedTokenTransferStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStakedTokenTransferStrategy__factory>;
    getContractFactory(
      name: "ITransferStrategyBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransferStrategyBase__factory>;
    getContractFactory(
      name: "RewardsController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsController__factory>;
    getContractFactory(
      name: "RewardsDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardsDistributor__factory>;
    getContractFactory(
      name: "PullRewardsTransferStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PullRewardsTransferStrategy__factory>;
    getContractFactory(
      name: "StakedTokenTransferStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakedTokenTransferStrategy__factory>;
    getContractFactory(
      name: "TransferStrategyBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferStrategyBase__factory>;
    getContractFactory(
      name: "AaveEcosystemReserveController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveEcosystemReserveController__factory>;
    getContractFactory(
      name: "AaveEcosystemReserveV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AaveEcosystemReserveV2__factory>;
    getContractFactory(
      name: "AdminControlledEcosystemReserve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminControlledEcosystemReserve__factory>;
    getContractFactory(
      name: "Collector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Collector__factory>;
    getContractFactory(
      name: "CollectorController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CollectorController__factory>;
    getContractFactory(
      name: "IAaveEcosystemReserveController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAaveEcosystemReserveController__factory>;
    getContractFactory(
      name: "IAdminControlledEcosystemReserve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAdminControlledEcosystemReserve__factory>;
    getContractFactory(
      name: "ICollector",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICollector__factory>;
    getContractFactory(
      name: "IStreamable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStreamable__factory>;
    getContractFactory(
      name: "CollateralLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CollateralLogic__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "PriceConvertor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceConvertor__factory>;
    getContractFactory(
      name: "SynthLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SynthLogic__factory>;
    getContractFactory(
      name: "SynthPoolLogic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SynthPoolLogic__factory>;
    getContractFactory(
      name: "IAAVEPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAAVEPool__factory>;
    getContractFactory(
      name: "IPerpPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPerpPosition__factory>;
    getContractFactory(
      name: "PerpFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpFactory__factory>;
    getContractFactory(
      name: "PayableMulticall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PayableMulticall__factory>;
    getContractFactory(
      name: "PerpPosition",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PerpPosition__factory>;
    getContractFactory(
      name: "ISynthPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISynthPool__factory>;
    getContractFactory(
      name: "SynthPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SynthPool__factory>;
    getContractFactory(
      name: "SynthPoolStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SynthPoolStorage__factory>;
    getContractFactory(
      name: "RouterErrors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RouterErrors__factory>;
    getContractFactory(
      name: "ClaimRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimRewards__factory>;
    getContractFactory(
      name: "ClaimRewardsFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ClaimRewardsFactory__factory>;
    getContractFactory(
      name: "Router_V2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Router_V2__factory>;
    getContractFactory(
      name: "Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: "ERC20X",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20X__factory>;
    getContractFactory(
      name: "IERC20X",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20X__factory>;
    getContractFactory(
      name: "AddressStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressStorage__factory>;
    getContractFactory(
      name: "ISyntheX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISyntheX__factory>;
    getContractFactory(
      name: "SyntheX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyntheX__factory>;
    getContractFactory(
      name: "SyntheXStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyntheXStorage__factory>;
    getContractFactory(
      name: "VestedREAX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VestedREAX__factory>;
    getContractFactory(
      name: "MosaicToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MosaicToken__factory>;
    getContractFactory(
      name: "BaseTokenRedeemer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseTokenRedeemer__factory>;
    getContractFactory(
      name: "Crowdsale",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Crowdsale__factory>;
    getContractFactory(
      name: "ReaxToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReaxToken__factory>;
    getContractFactory(
      name: "VestedMOSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VestedMOSA__factory>;
    getContractFactory(
      name: "ATokenWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ATokenWrapper__factory>;
    getContractFactory(
      name: "ComptrollerInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ComptrollerInterface__factory>;
    getContractFactory(
      name: "CTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTokenInterface__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaking__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "MockPriceFeed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockPriceFeed__factory>;
    getContractFactory(
      name: "MockToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockToken__factory>;
    getContractFactory(
      name: "MockTokenRedeemer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockTokenRedeemer__factory>;
    getContractFactory(
      name: "Multicall2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall2__factory>;
    getContractFactory(
      name: "AAVEOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AAVEOracle__factory>;
    getContractFactory(
      name: "CompoundOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CompoundOracle__factory>;
    getContractFactory(
      name: "DIAOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DIAOracle__factory>;
    getContractFactory(
      name: "IDIAOracleV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDIAOracleV2__factory>;
    getContractFactory(
      name: "IDIAOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDIAOracle__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "IPriceOracleGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracleGetter__factory>;
    getContractFactory(
      name: "IPythOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPythOracle__factory>;
    getContractFactory(
      name: "IPythOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPythOracle__factory>;
    getContractFactory(
      name: "IPythOracleGetter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPythOracleGetter__factory>;
    getContractFactory(
      name: "PriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceOracle__factory>;
    getContractFactory(
      name: "PythOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PythOracle__factory>;
    getContractFactory(
      name: "SecondaryOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SecondaryOracle__factory>;
    getContractFactory(
      name: "TertiaryOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TertiaryOracle__factory>;
    getContractFactory(
      name: "PayableMulticall2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PayableMulticall2__factory>;
    getContractFactory(
      name: "StakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StakingRewards__factory>;
    getContractFactory(
      name: "PoolV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolV2__factory>;
    getContractFactory(
      name: "SyntheXV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SyntheXV2__factory>;
    getContractFactory(
      name: "Vault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vault__factory>;

    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IGovernancePowerDelegationToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernancePowerDelegationToken>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "GovernancePowerDelegationERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernancePowerDelegationERC20>;
    getContractAt(
      name: "AggregatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorInterface>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IAaveIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveIncentivesController>;
    getContractAt(
      name: "IAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAToken>;
    getContractAt(
      name: "IInitializableAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInitializableAToken>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolAddressesProvider>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "IScaledBalanceToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IScaledBalanceToken>;
    getContractAt(
      name: "IAaveDistributionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveDistributionManager>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Detailed>;
    getContractAt(
      name: "IStakedAave",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakedAave>;
    getContractAt(
      name: "ITransferHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferHook>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20WithSnapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20WithSnapshot>;
    getContractAt(
      name: "GovernancePowerWithSnapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernancePowerWithSnapshot>;
    getContractAt(
      name: "AaveDistributionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveDistributionManager>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "GovernancePowerDelegationERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernancePowerDelegationERC20>;
    getContractAt(
      name: "GovernancePowerWithSnapshot",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernancePowerWithSnapshot>;
    getContractAt(
      name: "IAaveDistributionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveDistributionManager>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IGovernancePowerDelegationToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernancePowerDelegationToken>;
    getContractAt(
      name: "IStakedAave",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakedAave>;
    getContractAt(
      name: "ITransferHook",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferHook>;
    getContractAt(
      name: "StakedTokenV2Rev3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakedTokenV2Rev3>;
    getContractAt(
      name: "AaveDistributionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveDistributionManager>;
    getContractAt(
      name: "StakedAave",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakedAave>;
    getContractAt(
      name: "StakedAaveV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakedAaveV2>;
    getContractAt(
      name: "StakedToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakedToken>;
    getContractAt(
      name: "StakedTokenV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakedTokenV2>;
    getContractAt(
      name: "IAuthentication",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthentication>;
    getContractAt(
      name: "ISignaturesValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignaturesValidator>;
    getContractAt(
      name: "ITemporarilyPausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITemporarilyPausable>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IAuthorizer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAuthorizer>;
    getContractAt(
      name: "IFlashLoanRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanRecipient>;
    getContractAt(
      name: "IProtocolFeesCollector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProtocolFeesCollector>;
    getContractAt(
      name: "IVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IVotesUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotesUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IERC1967Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967Upgradeable>;
    getContractAt(
      name: "IERC3156FlashBorrowerUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashBorrowerUpgradeable>;
    getContractAt(
      name: "IERC3156FlashLenderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC3156FlashLenderUpgradeable>;
    getContractAt(
      name: "IERC5267Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267Upgradeable>;
    getContractAt(
      name: "IERC5805Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5805Upgradeable>;
    getContractAt(
      name: "IERC6372Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC6372Upgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "ERC20BurnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20BurnableUpgradeable>;
    getContractAt(
      name: "ERC20FlashMintUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20FlashMintUpgradeable>;
    getContractAt(
      name: "ERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitUpgradeable>;
    getContractAt(
      name: "ERC20VotesUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20VotesUpgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "EIP712Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "MulticallUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MulticallUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IERC5267",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "EIP712",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Multicall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall>;
    getContractAt(
      name: "ShortStrings",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "IPyth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPyth>;
    getContractAt(
      name: "IPythEvents",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPythEvents>;
    getContractAt(
      name: "AggregatorInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AggregatorInterface>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Detailed>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "AdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminUpgradeabilityProxy>;
    getContractAt(
      name: "BaseAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseAdminUpgradeabilityProxy>;
    getContractAt(
      name: "BaseUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableUpgradeabilityProxy>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "UpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeabilityProxy>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "WTLOS9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WTLOS9>;
    getContractAt(
      name: "ReservesSetupHelper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReservesSetupHelper>;
    getContractAt(
      name: "FlashLoanReceiverBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLoanReceiverBase>;
    getContractAt(
      name: "FlashLoanSimpleReceiverBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLoanSimpleReceiverBase>;
    getContractAt(
      name: "IFlashLoanReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanReceiver>;
    getContractAt(
      name: "IFlashLoanSimpleReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlashLoanSimpleReceiver>;
    getContractAt(
      name: "IAaveIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveIncentivesController>;
    getContractAt(
      name: "IAaveOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveOracle>;
    getContractAt(
      name: "IACLManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IACLManager>;
    getContractAt(
      name: "IAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAToken>;
    getContractAt(
      name: "ICreditDelegationToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICreditDelegationToken>;
    getContractAt(
      name: "IDefaultInterestRateStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDefaultInterestRateStrategy>;
    getContractAt(
      name: "IDelegationToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDelegationToken>;
    getContractAt(
      name: "IERC20WithPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20WithPermit>;
    getContractAt(
      name: "IInitializableAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInitializableAToken>;
    getContractAt(
      name: "IInitializableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInitializableDebtToken>;
    getContractAt(
      name: "IL2Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL2Pool>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolAddressesProvider>;
    getContractAt(
      name: "IPoolAddressesProviderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolAddressesProviderRegistry>;
    getContractAt(
      name: "IPoolConfigurator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolConfigurator>;
    getContractAt(
      name: "IPoolDataProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolDataProvider>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "IPriceOracleGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracleGetter>;
    getContractAt(
      name: "IPriceOracleSentinel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracleSentinel>;
    getContractAt(
      name: "IReserveInterestRateStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IReserveInterestRateStrategy>;
    getContractAt(
      name: "IScaledBalanceToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IScaledBalanceToken>;
    getContractAt(
      name: "ISequencerOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISequencerOracle>;
    getContractAt(
      name: "IStableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStableDebtToken>;
    getContractAt(
      name: "IVariableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVariableDebtToken>;
    getContractAt(
      name: "IRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouter>;
    getContractAt(
      name: "Liquidation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Liquidation>;
    getContractAt(
      name: "Liquidation2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Liquidation2>;
    getContractAt(
      name: "IRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouter>;
    getContractAt(
      name: "SynthLiquidation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SynthLiquidation>;
    getContractAt(
      name: "AaveOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveOracle>;
    getContractAt(
      name: "AaveProtocolDataProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveProtocolDataProvider>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "L2Encoder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.L2Encoder>;
    getContractAt(
      name: "MockFlashLoanReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFlashLoanReceiver>;
    getContractAt(
      name: "MockFlashLoanSimpleReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockFlashLoanSimpleReceiver>;
    getContractAt(
      name: "MockIncentivesController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockIncentivesController>;
    getContractAt(
      name: "MockPeripheryContractV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPeripheryContractV1>;
    getContractAt(
      name: "MockPeripheryContractV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPeripheryContractV2>;
    getContractAt(
      name: "MockReserveConfiguration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockReserveConfiguration>;
    getContractAt(
      name: "SelfdestructTransfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SelfdestructTransfer>;
    getContractAt(
      name: "MockAggregator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockAggregator>;
    getContractAt(
      name: "SequencerOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SequencerOracle>;
    getContractAt(
      name: "FlashloanAttacker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashloanAttacker>;
    getContractAt(
      name: "MockReserveInterestRateStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockReserveInterestRateStrategy>;
    getContractAt(
      name: "WadRayMathWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WadRayMathWrapper>;
    getContractAt(
      name: "MintableDelegationERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableDelegationERC20>;
    getContractAt(
      name: "MintableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableERC20>;
    getContractAt(
      name: "MockATokenRepayment",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockATokenRepayment>;
    getContractAt(
      name: "WETH9Mocked",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9Mocked>;
    getContractAt(
      name: "MockAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockAToken>;
    getContractAt(
      name: "MockInitializableFromConstructorImple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockInitializableFromConstructorImple>;
    getContractAt(
      name: "MockInitializableImple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockInitializableImple>;
    getContractAt(
      name: "MockInitializableImpleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockInitializableImpleV2>;
    getContractAt(
      name: "MockReentrantInitializableImple",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockReentrantInitializableImple>;
    getContractAt(
      name: "MockStableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockStableDebtToken>;
    getContractAt(
      name: "MockVariableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVariableDebtToken>;
    getContractAt(
      name: "ACLManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ACLManager>;
    getContractAt(
      name: "PoolAddressesProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolAddressesProvider>;
    getContractAt(
      name: "PoolAddressesProviderRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolAddressesProviderRegistry>;
    getContractAt(
      name: "PriceOracleSentinel",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracleSentinel>;
    getContractAt(
      name: "BaseImmutableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseImmutableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "InitializableImmutableAdminUpgradeabilityProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InitializableImmutableAdminUpgradeabilityProxy>;
    getContractAt(
      name: "ReserveConfiguration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveConfiguration>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "BorrowLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BorrowLogic>;
    getContractAt(
      name: "BridgeLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeLogic>;
    getContractAt(
      name: "ConfiguratorLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfiguratorLogic>;
    getContractAt(
      name: "EModeLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EModeLogic>;
    getContractAt(
      name: "FlashLoanLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FlashLoanLogic>;
    getContractAt(
      name: "IsolationModeLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IsolationModeLogic>;
    getContractAt(
      name: "LiquidationLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LiquidationLogic>;
    getContractAt(
      name: "PoolLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolLogic>;
    getContractAt(
      name: "ReserveLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReserveLogic>;
    getContractAt(
      name: "SupplyLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SupplyLogic>;
    getContractAt(
      name: "ValidationLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ValidationLogic>;
    getContractAt(
      name: "DefaultReserveInterestRateStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefaultReserveInterestRateStrategy>;
    getContractAt(
      name: "Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pool>;
    getContractAt(
      name: "PoolConfigurator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolConfigurator>;
    getContractAt(
      name: "PoolStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolStorage>;
    getContractAt(
      name: "AToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AToken>;
    getContractAt(
      name: "DebtTokenBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DebtTokenBase>;
    getContractAt(
      name: "EIP712Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712Base>;
    getContractAt(
      name: "IncentivizedERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IncentivizedERC20>;
    getContractAt(
      name: "MintableIncentivizedERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableIncentivizedERC20>;
    getContractAt(
      name: "ScaledBalanceTokenBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ScaledBalanceTokenBase>;
    getContractAt(
      name: "DelegationAwareAToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DelegationAwareAToken>;
    getContractAt(
      name: "StableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StableDebtToken>;
    getContractAt(
      name: "VariableDebtToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VariableDebtToken>;
    getContractAt(
      name: "IEACAggregatorProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEACAggregatorProxy>;
    getContractAt(
      name: "IERC20DetailedBytes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20DetailedBytes>;
    getContractAt(
      name: "IUiIncentiveDataProviderV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUiIncentiveDataProviderV3>;
    getContractAt(
      name: "IUiPoolDataProviderV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IUiPoolDataProviderV3>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "IWrappedTokenGatewayV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWrappedTokenGatewayV3>;
    getContractAt(
      name: "UiIncentiveDataProviderV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UiIncentiveDataProviderV3>;
    getContractAt(
      name: "UiPoolDataProviderV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UiPoolDataProviderV3>;
    getContractAt(
      name: "WalletBalanceProvider",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WalletBalanceProvider>;
    getContractAt(
      name: "WrappedTokenGatewayV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WrappedTokenGatewayV3>;
    getContractAt(
      name: "ATokenMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ATokenMock>;
    getContractAt(
      name: "SelfdestructTransfer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SelfdestructTransfer>;
    getContractAt(
      name: "MockBadTransferStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBadTransferStrategy>;
    getContractAt(
      name: "Faucet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Faucet>;
    getContractAt(
      name: "IFaucet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFaucet>;
    getContractAt(
      name: "TestnetERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestnetERC20>;
    getContractAt(
      name: "WETH9Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9Mock>;
    getContractAt(
      name: "EmissionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EmissionManager>;
    getContractAt(
      name: "IEmissionManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IEmissionManager>;
    getContractAt(
      name: "IPullRewardsTransferStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPullRewardsTransferStrategy>;
    getContractAt(
      name: "IRewardsController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardsController>;
    getContractAt(
      name: "IRewardsDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardsDistributor>;
    getContractAt(
      name: "IStakedToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakedToken>;
    getContractAt(
      name: "IStakedTokenTransferStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStakedTokenTransferStrategy>;
    getContractAt(
      name: "ITransferStrategyBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransferStrategyBase>;
    getContractAt(
      name: "RewardsController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsController>;
    getContractAt(
      name: "RewardsDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardsDistributor>;
    getContractAt(
      name: "PullRewardsTransferStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PullRewardsTransferStrategy>;
    getContractAt(
      name: "StakedTokenTransferStrategy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakedTokenTransferStrategy>;
    getContractAt(
      name: "TransferStrategyBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferStrategyBase>;
    getContractAt(
      name: "AaveEcosystemReserveController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveEcosystemReserveController>;
    getContractAt(
      name: "AaveEcosystemReserveV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AaveEcosystemReserveV2>;
    getContractAt(
      name: "AdminControlledEcosystemReserve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminControlledEcosystemReserve>;
    getContractAt(
      name: "Collector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Collector>;
    getContractAt(
      name: "CollectorController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CollectorController>;
    getContractAt(
      name: "IAaveEcosystemReserveController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAaveEcosystemReserveController>;
    getContractAt(
      name: "IAdminControlledEcosystemReserve",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAdminControlledEcosystemReserve>;
    getContractAt(
      name: "ICollector",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICollector>;
    getContractAt(
      name: "IStreamable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStreamable>;
    getContractAt(
      name: "CollateralLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CollateralLogic>;
    getContractAt(
      name: "Errors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "PriceConvertor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceConvertor>;
    getContractAt(
      name: "SynthLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SynthLogic>;
    getContractAt(
      name: "SynthPoolLogic",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SynthPoolLogic>;
    getContractAt(
      name: "IAAVEPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAAVEPool>;
    getContractAt(
      name: "IPerpPosition",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPerpPosition>;
    getContractAt(
      name: "PerpFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpFactory>;
    getContractAt(
      name: "PayableMulticall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PayableMulticall>;
    getContractAt(
      name: "PerpPosition",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PerpPosition>;
    getContractAt(
      name: "ISynthPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISynthPool>;
    getContractAt(
      name: "SynthPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SynthPool>;
    getContractAt(
      name: "SynthPoolStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SynthPoolStorage>;
    getContractAt(
      name: "RouterErrors",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RouterErrors>;
    getContractAt(
      name: "ClaimRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimRewards>;
    getContractAt(
      name: "ClaimRewardsFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ClaimRewardsFactory>;
    getContractAt(
      name: "Router_V2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Router_V2>;
    getContractAt(
      name: "Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Router>;
    getContractAt(
      name: "ERC20X",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20X>;
    getContractAt(
      name: "IERC20X",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20X>;
    getContractAt(
      name: "AddressStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressStorage>;
    getContractAt(
      name: "ISyntheX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISyntheX>;
    getContractAt(
      name: "SyntheX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyntheX>;
    getContractAt(
      name: "SyntheXStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyntheXStorage>;
    getContractAt(
      name: "VestedREAX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VestedREAX>;
    getContractAt(
      name: "MosaicToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MosaicToken>;
    getContractAt(
      name: "BaseTokenRedeemer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseTokenRedeemer>;
    getContractAt(
      name: "Crowdsale",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Crowdsale>;
    getContractAt(
      name: "ReaxToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReaxToken>;
    getContractAt(
      name: "VestedMOSA",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VestedMOSA>;
    getContractAt(
      name: "ATokenWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ATokenWrapper>;
    getContractAt(
      name: "ComptrollerInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ComptrollerInterface>;
    getContractAt(
      name: "CTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CTokenInterface>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "IStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaking>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "MockPriceFeed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockPriceFeed>;
    getContractAt(
      name: "MockToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockToken>;
    getContractAt(
      name: "MockTokenRedeemer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockTokenRedeemer>;
    getContractAt(
      name: "Multicall2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicall2>;
    getContractAt(
      name: "AAVEOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AAVEOracle>;
    getContractAt(
      name: "CompoundOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CompoundOracle>;
    getContractAt(
      name: "DIAOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DIAOracle>;
    getContractAt(
      name: "IDIAOracleV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDIAOracleV2>;
    getContractAt(
      name: "IDIAOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDIAOracle>;
    getContractAt(
      name: "IPriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "IPriceOracleGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracleGetter>;
    getContractAt(
      name: "IPythOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPythOracle>;
    getContractAt(
      name: "IPythOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPythOracle>;
    getContractAt(
      name: "IPythOracleGetter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPythOracleGetter>;
    getContractAt(
      name: "PriceOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceOracle>;
    getContractAt(
      name: "PythOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PythOracle>;
    getContractAt(
      name: "SecondaryOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SecondaryOracle>;
    getContractAt(
      name: "TertiaryOracle",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TertiaryOracle>;
    getContractAt(
      name: "PayableMulticall2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PayableMulticall2>;
    getContractAt(
      name: "StakingRewards",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StakingRewards>;
    getContractAt(
      name: "PoolV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolV2>;
    getContractAt(
      name: "SyntheXV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SyntheXV2>;
    getContractAt(
      name: "Vault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Vault>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
