/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface ATokenMockInterface extends utils.Interface {
  functions: {
    "_aic()": FunctionFragment;
    "cleanUserState()": FunctionFragment;
    "decimals()": FunctionFragment;
    "doubleHandleActionOnAic(address,uint256,uint256)": FunctionFragment;
    "getScaledUserBalanceAndSupply(address)": FunctionFragment;
    "handleActionOnAic(address,uint256,uint256)": FunctionFragment;
    "scaledTotalSupply()": FunctionFragment;
    "setUserBalanceAndSupply(uint256,uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_aic"
      | "cleanUserState"
      | "decimals"
      | "doubleHandleActionOnAic"
      | "getScaledUserBalanceAndSupply"
      | "handleActionOnAic"
      | "scaledTotalSupply"
      | "setUserBalanceAndSupply"
      | "totalSupply"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_aic", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cleanUserState",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "doubleHandleActionOnAic",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getScaledUserBalanceAndSupply",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "handleActionOnAic",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scaledTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUserBalanceAndSupply",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "_aic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cleanUserState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doubleHandleActionOnAic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScaledUserBalanceAndSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleActionOnAic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaledTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserBalanceAndSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {
    "Accrued(address,address,uint256,uint256,uint256)": EventFragment;
    "AssetConfigUpdated(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Accrued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetConfigUpdated"): EventFragment;
}

export interface AccruedEventObject {
  asset: string;
  user: string;
  assetIndex: BigNumber;
  userIndex: BigNumber;
  rewardsAccrued: BigNumber;
}
export type AccruedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  AccruedEventObject
>;

export type AccruedEventFilter = TypedEventFilter<AccruedEvent>;

export interface AssetConfigUpdatedEventObject {
  asset: string;
  reward: string;
  emission: BigNumber;
  distributionEnd: BigNumber;
  assetIndex: BigNumber;
}
export type AssetConfigUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  AssetConfigUpdatedEventObject
>;

export type AssetConfigUpdatedEventFilter =
  TypedEventFilter<AssetConfigUpdatedEvent>;

export interface ATokenMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ATokenMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _aic(overrides?: CallOverrides): Promise<[string]>;

    cleanUserState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    doubleHandleActionOnAic(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getScaledUserBalanceAndSupply(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    handleActionOnAic(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    setUserBalanceAndSupply(
      userBalance: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  _aic(overrides?: CallOverrides): Promise<string>;

  cleanUserState(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<BigNumber>;

  doubleHandleActionOnAic(
    user: PromiseOrValue<string>,
    totalSupply: PromiseOrValue<BigNumberish>,
    userBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getScaledUserBalanceAndSupply(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  handleActionOnAic(
    user: PromiseOrValue<string>,
    totalSupply: PromiseOrValue<BigNumberish>,
    userBalance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  setUserBalanceAndSupply(
    userBalance: PromiseOrValue<BigNumberish>,
    totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    _aic(overrides?: CallOverrides): Promise<string>;

    cleanUserState(overrides?: CallOverrides): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    doubleHandleActionOnAic(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getScaledUserBalanceAndSupply(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    handleActionOnAic(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setUserBalanceAndSupply(
      userBalance: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Accrued(address,address,uint256,uint256,uint256)"(
      asset?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      assetIndex?: null,
      userIndex?: null,
      rewardsAccrued?: null
    ): AccruedEventFilter;
    Accrued(
      asset?: PromiseOrValue<string> | null,
      user?: PromiseOrValue<string> | null,
      assetIndex?: null,
      userIndex?: null,
      rewardsAccrued?: null
    ): AccruedEventFilter;

    "AssetConfigUpdated(address,address,uint256,uint256,uint256)"(
      asset?: PromiseOrValue<string> | null,
      reward?: PromiseOrValue<string> | null,
      emission?: null,
      distributionEnd?: null,
      assetIndex?: null
    ): AssetConfigUpdatedEventFilter;
    AssetConfigUpdated(
      asset?: PromiseOrValue<string> | null,
      reward?: PromiseOrValue<string> | null,
      emission?: null,
      distributionEnd?: null,
      assetIndex?: null
    ): AssetConfigUpdatedEventFilter;
  };

  estimateGas: {
    _aic(overrides?: CallOverrides): Promise<BigNumber>;

    cleanUserState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    doubleHandleActionOnAic(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getScaledUserBalanceAndSupply(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handleActionOnAic(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    setUserBalanceAndSupply(
      userBalance: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _aic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cleanUserState(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doubleHandleActionOnAic(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getScaledUserBalanceAndSupply(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handleActionOnAic(
      user: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      userBalance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    scaledTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUserBalanceAndSupply(
      userBalance: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
