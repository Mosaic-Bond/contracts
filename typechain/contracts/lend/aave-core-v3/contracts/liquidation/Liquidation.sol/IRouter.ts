/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export declare namespace IVault {
  export type BatchSwapStepStruct = {
    poolId: PromiseOrValue<BytesLike>;
    assetInIndex: PromiseOrValue<BigNumberish>;
    assetOutIndex: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    userData: PromiseOrValue<BytesLike>;
  };

  export type BatchSwapStepStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    poolId: string;
    assetInIndex: BigNumber;
    assetOutIndex: BigNumber;
    amount: BigNumber;
    userData: string;
  };
}

export declare namespace IRouter {
  export type SwapStruct = {
    swap: IVault.BatchSwapStepStruct[];
    limits: PromiseOrValue<BigNumberish>[];
    assets: PromiseOrValue<string>[];
    isBalancerPool: PromiseOrValue<boolean>;
  };

  export type SwapStructOutput = [
    IVault.BatchSwapStepStructOutput[],
    BigNumber[],
    string[],
    boolean
  ] & {
    swap: IVault.BatchSwapStepStructOutput[];
    limits: BigNumber[];
    assets: string[];
    isBalancerPool: boolean;
  };

  export type SwapDataStruct = {
    kind: PromiseOrValue<BigNumberish>;
    swaps: IRouter.SwapStruct[];
    recipient: PromiseOrValue<string>;
    deadline: PromiseOrValue<BigNumberish>;
  };

  export type SwapDataStructOutput = [
    number,
    IRouter.SwapStructOutput[],
    string,
    BigNumber
  ] & {
    kind: number;
    swaps: IRouter.SwapStructOutput[];
    recipient: string;
    deadline: BigNumber;
  };
}

export interface IRouterInterface extends utils.Interface {
  functions: {
    "swap((uint8,((bytes32,uint256,uint256,uint256,bytes)[],int256[],address[],bool)[],address,uint256),bytes[])": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "swap"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "swap",
    values: [IRouter.SwapDataStruct, PromiseOrValue<BytesLike>[]]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export interface IRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swap(
      swapData: IRouter.SwapDataStruct,
      pythUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  swap(
    swapData: IRouter.SwapDataStruct,
    pythUpdateData: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    swap(
      swapData: IRouter.SwapDataStruct,
      pythUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    swap(
      swapData: IRouter.SwapDataStruct,
      pythUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swap(
      swapData: IRouter.SwapDataStruct,
      pythUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
