/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../common";

export interface RouterErrorsInterface extends utils.Interface {
  functions: {
    "ADDRESS_CANNOT_SEND_VALUE()": FunctionFragment;
    "AMOUNT_LIMIT_FAIL()": FunctionFragment;
    "ARRAY_LENGTH_MISMATCH()": FunctionFragment;
    "ASSETS_MISMATCH()": FunctionFragment;
    "ETH_TRANSFER()": FunctionFragment;
    "GIVEN_IN_ONLY_ALLOWED()": FunctionFragment;
    "INCORRECT_ETH_VALUE()": FunctionFragment;
    "INSUFFICIENT_ERC20_BALANCE()": FunctionFragment;
    "INSUFFICIENT_ETH()": FunctionFragment;
    "INVALID_SWAPS_INPUT()": FunctionFragment;
    "KIND_NOT_VALID()": FunctionFragment;
    "MIN_AMOUNT_NOT_RECIEVED()": FunctionFragment;
    "NOT_AUTHORIZED()": FunctionFragment;
    "POOL_NOT_SUPPORTED()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADDRESS_CANNOT_SEND_VALUE"
      | "AMOUNT_LIMIT_FAIL"
      | "ARRAY_LENGTH_MISMATCH"
      | "ASSETS_MISMATCH"
      | "ETH_TRANSFER"
      | "GIVEN_IN_ONLY_ALLOWED"
      | "INCORRECT_ETH_VALUE"
      | "INSUFFICIENT_ERC20_BALANCE"
      | "INSUFFICIENT_ETH"
      | "INVALID_SWAPS_INPUT"
      | "KIND_NOT_VALID"
      | "MIN_AMOUNT_NOT_RECIEVED"
      | "NOT_AUTHORIZED"
      | "POOL_NOT_SUPPORTED"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADDRESS_CANNOT_SEND_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AMOUNT_LIMIT_FAIL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ARRAY_LENGTH_MISMATCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ASSETS_MISMATCH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ETH_TRANSFER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GIVEN_IN_ONLY_ALLOWED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INCORRECT_ETH_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSUFFICIENT_ERC20_BALANCE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INSUFFICIENT_ETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INVALID_SWAPS_INPUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "KIND_NOT_VALID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_AMOUNT_NOT_RECIEVED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NOT_AUTHORIZED",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "POOL_NOT_SUPPORTED",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESS_CANNOT_SEND_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AMOUNT_LIMIT_FAIL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ARRAY_LENGTH_MISMATCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ASSETS_MISMATCH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ETH_TRANSFER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GIVEN_IN_ONLY_ALLOWED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INCORRECT_ETH_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSUFFICIENT_ERC20_BALANCE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INSUFFICIENT_ETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INVALID_SWAPS_INPUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "KIND_NOT_VALID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_AMOUNT_NOT_RECIEVED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NOT_AUTHORIZED",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "POOL_NOT_SUPPORTED",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RouterErrors extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RouterErrorsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADDRESS_CANNOT_SEND_VALUE(overrides?: CallOverrides): Promise<[string]>;

    AMOUNT_LIMIT_FAIL(overrides?: CallOverrides): Promise<[string]>;

    ARRAY_LENGTH_MISMATCH(overrides?: CallOverrides): Promise<[string]>;

    ASSETS_MISMATCH(overrides?: CallOverrides): Promise<[string]>;

    ETH_TRANSFER(overrides?: CallOverrides): Promise<[string]>;

    GIVEN_IN_ONLY_ALLOWED(overrides?: CallOverrides): Promise<[string]>;

    INCORRECT_ETH_VALUE(overrides?: CallOverrides): Promise<[string]>;

    INSUFFICIENT_ERC20_BALANCE(overrides?: CallOverrides): Promise<[string]>;

    INSUFFICIENT_ETH(overrides?: CallOverrides): Promise<[string]>;

    INVALID_SWAPS_INPUT(overrides?: CallOverrides): Promise<[string]>;

    KIND_NOT_VALID(overrides?: CallOverrides): Promise<[string]>;

    MIN_AMOUNT_NOT_RECIEVED(overrides?: CallOverrides): Promise<[string]>;

    NOT_AUTHORIZED(overrides?: CallOverrides): Promise<[string]>;

    POOL_NOT_SUPPORTED(overrides?: CallOverrides): Promise<[string]>;
  };

  ADDRESS_CANNOT_SEND_VALUE(overrides?: CallOverrides): Promise<string>;

  AMOUNT_LIMIT_FAIL(overrides?: CallOverrides): Promise<string>;

  ARRAY_LENGTH_MISMATCH(overrides?: CallOverrides): Promise<string>;

  ASSETS_MISMATCH(overrides?: CallOverrides): Promise<string>;

  ETH_TRANSFER(overrides?: CallOverrides): Promise<string>;

  GIVEN_IN_ONLY_ALLOWED(overrides?: CallOverrides): Promise<string>;

  INCORRECT_ETH_VALUE(overrides?: CallOverrides): Promise<string>;

  INSUFFICIENT_ERC20_BALANCE(overrides?: CallOverrides): Promise<string>;

  INSUFFICIENT_ETH(overrides?: CallOverrides): Promise<string>;

  INVALID_SWAPS_INPUT(overrides?: CallOverrides): Promise<string>;

  KIND_NOT_VALID(overrides?: CallOverrides): Promise<string>;

  MIN_AMOUNT_NOT_RECIEVED(overrides?: CallOverrides): Promise<string>;

  NOT_AUTHORIZED(overrides?: CallOverrides): Promise<string>;

  POOL_NOT_SUPPORTED(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADDRESS_CANNOT_SEND_VALUE(overrides?: CallOverrides): Promise<string>;

    AMOUNT_LIMIT_FAIL(overrides?: CallOverrides): Promise<string>;

    ARRAY_LENGTH_MISMATCH(overrides?: CallOverrides): Promise<string>;

    ASSETS_MISMATCH(overrides?: CallOverrides): Promise<string>;

    ETH_TRANSFER(overrides?: CallOverrides): Promise<string>;

    GIVEN_IN_ONLY_ALLOWED(overrides?: CallOverrides): Promise<string>;

    INCORRECT_ETH_VALUE(overrides?: CallOverrides): Promise<string>;

    INSUFFICIENT_ERC20_BALANCE(overrides?: CallOverrides): Promise<string>;

    INSUFFICIENT_ETH(overrides?: CallOverrides): Promise<string>;

    INVALID_SWAPS_INPUT(overrides?: CallOverrides): Promise<string>;

    KIND_NOT_VALID(overrides?: CallOverrides): Promise<string>;

    MIN_AMOUNT_NOT_RECIEVED(overrides?: CallOverrides): Promise<string>;

    NOT_AUTHORIZED(overrides?: CallOverrides): Promise<string>;

    POOL_NOT_SUPPORTED(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ADDRESS_CANNOT_SEND_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    AMOUNT_LIMIT_FAIL(overrides?: CallOverrides): Promise<BigNumber>;

    ARRAY_LENGTH_MISMATCH(overrides?: CallOverrides): Promise<BigNumber>;

    ASSETS_MISMATCH(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_TRANSFER(overrides?: CallOverrides): Promise<BigNumber>;

    GIVEN_IN_ONLY_ALLOWED(overrides?: CallOverrides): Promise<BigNumber>;

    INCORRECT_ETH_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    INSUFFICIENT_ERC20_BALANCE(overrides?: CallOverrides): Promise<BigNumber>;

    INSUFFICIENT_ETH(overrides?: CallOverrides): Promise<BigNumber>;

    INVALID_SWAPS_INPUT(overrides?: CallOverrides): Promise<BigNumber>;

    KIND_NOT_VALID(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_AMOUNT_NOT_RECIEVED(overrides?: CallOverrides): Promise<BigNumber>;

    NOT_AUTHORIZED(overrides?: CallOverrides): Promise<BigNumber>;

    POOL_NOT_SUPPORTED(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADDRESS_CANNOT_SEND_VALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AMOUNT_LIMIT_FAIL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ARRAY_LENGTH_MISMATCH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ASSETS_MISMATCH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ETH_TRANSFER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GIVEN_IN_ONLY_ALLOWED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INCORRECT_ETH_VALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INSUFFICIENT_ERC20_BALANCE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INSUFFICIENT_ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INVALID_SWAPS_INPUT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    KIND_NOT_VALID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_AMOUNT_NOT_RECIEVED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NOT_AUTHORIZED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    POOL_NOT_SUPPORTED(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
