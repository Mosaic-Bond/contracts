/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ISyntheXInterface extends utils.Interface {
  functions: {
    "claimReward(address[],address,address[])": FunctionFragment;
    "distribute(uint256)": FunctionFragment;
    "distribute(address,uint256,uint256)": FunctionFragment;
    "getRewardsAccrued(address[],address,address[])": FunctionFragment;
    "isL0Admin(address)": FunctionFragment;
    "isL1Admin(address)": FunctionFragment;
    "isL2Admin(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimReward"
      | "distribute(uint256)"
      | "distribute(address,uint256,uint256)"
      | "getRewardsAccrued"
      | "isL0Admin"
      | "isL1Admin"
      | "isL2Admin"
      | "supportsInterface"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimReward",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute(address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardsAccrued",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isL0Admin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isL1Admin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isL2Admin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distribute(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distribute(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardsAccrued",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isL0Admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isL1Admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isL2Admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "DistributedReward(address[],address,address,uint256[],uint256[])": EventFragment;
    "SetPoolRewardSpeed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DistributedReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetPoolRewardSpeed"): EventFragment;
}

export interface DistributedRewardEventObject {
  rewardTokens: string[];
  pool: string;
  _account: string;
  accountDelta: BigNumber[];
  rewardIndex: BigNumber[];
}
export type DistributedRewardEvent = TypedEvent<
  [string[], string, string, BigNumber[], BigNumber[]],
  DistributedRewardEventObject
>;

export type DistributedRewardEventFilter =
  TypedEventFilter<DistributedRewardEvent>;

export interface SetPoolRewardSpeedEventObject {
  rewardToken: string;
  pool: string;
  speed: BigNumber;
}
export type SetPoolRewardSpeedEvent = TypedEvent<
  [string, string, BigNumber],
  SetPoolRewardSpeedEventObject
>;

export type SetPoolRewardSpeedEventFilter =
  TypedEventFilter<SetPoolRewardSpeedEvent>;

export interface ISyntheX extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISyntheXInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimReward(
      _rewardTokens: PromiseOrValue<string>[],
      holder: PromiseOrValue<string>,
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "distribute(uint256)"(
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "distribute(address,uint256,uint256)"(
      _account: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _balance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRewardsAccrued(
      _rewardTokens: PromiseOrValue<string>[],
      holder: PromiseOrValue<string>,
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isL0Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isL1Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isL2Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  claimReward(
    _rewardTokens: PromiseOrValue<string>[],
    holder: PromiseOrValue<string>,
    _pools: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "distribute(uint256)"(
    _totalSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "distribute(address,uint256,uint256)"(
    _account: PromiseOrValue<string>,
    _totalSupply: PromiseOrValue<BigNumberish>,
    _balance: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRewardsAccrued(
    _rewardTokens: PromiseOrValue<string>[],
    holder: PromiseOrValue<string>,
    _pools: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isL0Admin(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isL1Admin(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isL2Admin(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claimReward(
      _rewardTokens: PromiseOrValue<string>[],
      holder: PromiseOrValue<string>,
      _pools: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute(uint256)"(
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute(address,uint256,uint256)"(
      _account: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _balance: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRewardsAccrued(
      _rewardTokens: PromiseOrValue<string>[],
      holder: PromiseOrValue<string>,
      _pools: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    isL0Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isL1Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isL2Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DistributedReward(address[],address,address,uint256[],uint256[])"(
      rewardTokens?: null,
      pool?: PromiseOrValue<string> | null,
      _account?: null,
      accountDelta?: null,
      rewardIndex?: null
    ): DistributedRewardEventFilter;
    DistributedReward(
      rewardTokens?: null,
      pool?: PromiseOrValue<string> | null,
      _account?: null,
      accountDelta?: null,
      rewardIndex?: null
    ): DistributedRewardEventFilter;

    "SetPoolRewardSpeed(address,address,uint256)"(
      rewardToken?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      speed?: null
    ): SetPoolRewardSpeedEventFilter;
    SetPoolRewardSpeed(
      rewardToken?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null,
      speed?: null
    ): SetPoolRewardSpeedEventFilter;
  };

  estimateGas: {
    claimReward(
      _rewardTokens: PromiseOrValue<string>[],
      holder: PromiseOrValue<string>,
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "distribute(uint256)"(
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "distribute(address,uint256,uint256)"(
      _account: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _balance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRewardsAccrued(
      _rewardTokens: PromiseOrValue<string>[],
      holder: PromiseOrValue<string>,
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isL0Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isL1Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isL2Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimReward(
      _rewardTokens: PromiseOrValue<string>[],
      holder: PromiseOrValue<string>,
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "distribute(uint256)"(
      _totalSupply: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "distribute(address,uint256,uint256)"(
      _account: PromiseOrValue<string>,
      _totalSupply: PromiseOrValue<BigNumberish>,
      _balance: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRewardsAccrued(
      _rewardTokens: PromiseOrValue<string>[],
      holder: PromiseOrValue<string>,
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isL0Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isL1Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isL2Admin(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
