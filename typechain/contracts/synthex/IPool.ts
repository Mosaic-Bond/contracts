/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace DataTypes {
  export type SynthStruct = {
    isActive: PromiseOrValue<boolean>;
    isDisabled: PromiseOrValue<boolean>;
    mintFee: PromiseOrValue<BigNumberish>;
    burnFee: PromiseOrValue<BigNumberish>;
  };

  export type SynthStructOutput = [boolean, boolean, BigNumber, BigNumber] & {
    isActive: boolean;
    isDisabled: boolean;
    mintFee: BigNumber;
    burnFee: BigNumber;
  };

  export type AccountLiquidityStruct = {
    liquidity: PromiseOrValue<BigNumberish>;
    collateral: PromiseOrValue<BigNumberish>;
    debt: PromiseOrValue<BigNumberish>;
  };

  export type AccountLiquidityStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber
  ] & { liquidity: BigNumber; collateral: BigNumber; debt: BigNumber };

  export type CollateralStruct = {
    isActive: PromiseOrValue<boolean>;
    cap: PromiseOrValue<BigNumberish>;
    totalDeposits: PromiseOrValue<BigNumberish>;
    baseLTV: PromiseOrValue<BigNumberish>;
    liqThreshold: PromiseOrValue<BigNumberish>;
    liqBonus: PromiseOrValue<BigNumberish>;
  };

  export type CollateralStructOutput = [
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    isActive: boolean;
    cap: BigNumber;
    totalDeposits: BigNumber;
    baseLTV: BigNumber;
    liqThreshold: BigNumber;
    liqBonus: BigNumber;
  };
}

export interface IPoolInterface extends utils.Interface {
  functions: {
    "addSynth(address,(bool,bool,uint256,uint256))": FunctionFragment;
    "burn(address,uint256,bytes[])": FunctionFragment;
    "deposit(address,uint256,address)": FunctionFragment;
    "depositETH(address)": FunctionFragment;
    "depositWithPermit(address,uint256,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "enterCollateral(address)": FunctionFragment;
    "exitCollateral(address,bytes[])": FunctionFragment;
    "getAccountLiquidity(address)": FunctionFragment;
    "getTotalDebtUSD()": FunctionFragment;
    "getUserDebtUSD(address)": FunctionFragment;
    "liquidate(address,address,uint256,address,bytes[])": FunctionFragment;
    "mint(address,uint256,address,bytes[])": FunctionFragment;
    "removeSynth(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swap(address,uint256,address,uint8,address,bytes[])": FunctionFragment;
    "updateCollateral(address,(bool,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "updateSynth(address,(bool,bool,uint256,uint256))": FunctionFragment;
    "withdraw(address,uint256,bool,bytes[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addSynth"
      | "burn"
      | "deposit"
      | "depositETH"
      | "depositWithPermit"
      | "enterCollateral"
      | "exitCollateral"
      | "getAccountLiquidity"
      | "getTotalDebtUSD"
      | "getUserDebtUSD"
      | "liquidate"
      | "mint"
      | "removeSynth"
      | "supportsInterface"
      | "swap"
      | "updateCollateral"
      | "updateSynth"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addSynth",
    values: [PromiseOrValue<string>, DataTypes.SynthStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "enterCollateral",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitCollateral",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountLiquidity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDebtUSD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDebtUSD",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSynth",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCollateral",
    values: [PromiseOrValue<string>, DataTypes.CollateralStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSynth",
    values: [PromiseOrValue<string>, DataTypes.SynthStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addSynth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enterCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDebtUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDebtUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSynth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSynth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "FeeTokenUpdated(address)": EventFragment;
    "IssuerAllocUpdated(uint256)": EventFragment;
    "PriceOracleUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeTokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IssuerAllocUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceOracleUpdated"): EventFragment;
}

export interface FeeTokenUpdatedEventObject {
  feeToken: string;
}
export type FeeTokenUpdatedEvent = TypedEvent<
  [string],
  FeeTokenUpdatedEventObject
>;

export type FeeTokenUpdatedEventFilter = TypedEventFilter<FeeTokenUpdatedEvent>;

export interface IssuerAllocUpdatedEventObject {
  issuerAlloc: BigNumber;
}
export type IssuerAllocUpdatedEvent = TypedEvent<
  [BigNumber],
  IssuerAllocUpdatedEventObject
>;

export type IssuerAllocUpdatedEventFilter =
  TypedEventFilter<IssuerAllocUpdatedEvent>;

export interface PriceOracleUpdatedEventObject {
  priceOracle: string;
}
export type PriceOracleUpdatedEvent = TypedEvent<
  [string],
  PriceOracleUpdatedEventObject
>;

export type PriceOracleUpdatedEventFilter =
  TypedEventFilter<PriceOracleUpdatedEvent>;

export interface IPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSynth(
      _synth: PromiseOrValue<string>,
      _params: DataTypes.SynthStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burn(
      _synth: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      _account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositWithPermit(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _approval: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterCollateral(
      _collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exitCollateral(
      _collateral: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountLiquidity(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [DataTypes.AccountLiquidityStructOutput] & {
        liq: DataTypes.AccountLiquidityStructOutput;
      }
    >;

    getTotalDebtUSD(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalDebt: BigNumber }>;

    getUserDebtUSD(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    liquidate(
      _synthIn: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _outAsset: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      _synth: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeSynth(
      _synth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swap(
      _synthIn: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _synthOut: PromiseOrValue<string>,
      _kind: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateCollateral(
      _collateral: PromiseOrValue<string>,
      _params: DataTypes.CollateralStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSynth(
      _synth: PromiseOrValue<string>,
      _params: DataTypes.SynthStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      unwrap: PromiseOrValue<boolean>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addSynth(
    _synth: PromiseOrValue<string>,
    _params: DataTypes.SynthStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burn(
    _synth: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    priceUpdateData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _collateral: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    _account: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositWithPermit(
    _collateral: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    _approval: PromiseOrValue<BigNumberish>,
    _deadline: PromiseOrValue<BigNumberish>,
    _v: PromiseOrValue<BigNumberish>,
    _r: PromiseOrValue<BytesLike>,
    _s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterCollateral(
    _collateral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exitCollateral(
    _collateral: PromiseOrValue<string>,
    priceUpdateData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountLiquidity(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DataTypes.AccountLiquidityStructOutput>;

  getTotalDebtUSD(overrides?: CallOverrides): Promise<BigNumber>;

  getUserDebtUSD(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  liquidate(
    _synthIn: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    _amountIn: PromiseOrValue<BigNumberish>,
    _outAsset: PromiseOrValue<string>,
    priceUpdateData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    _synth: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    priceUpdateData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeSynth(
    _synth: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swap(
    _synthIn: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _synthOut: PromiseOrValue<string>,
    _kind: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    priceUpdateData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateCollateral(
    _collateral: PromiseOrValue<string>,
    _params: DataTypes.CollateralStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSynth(
    _synth: PromiseOrValue<string>,
    _params: DataTypes.SynthStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _collateral: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    unwrap: PromiseOrValue<boolean>,
    priceUpdateData: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSynth(
      _synth: PromiseOrValue<string>,
      _params: DataTypes.SynthStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      _synth: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositWithPermit(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _approval: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    enterCollateral(
      _collateral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    exitCollateral(
      _collateral: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountLiquidity(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DataTypes.AccountLiquidityStructOutput>;

    getTotalDebtUSD(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDebtUSD(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _synthIn: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _outAsset: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      _synth: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSynth(
      _synth: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swap(
      _synthIn: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _synthOut: PromiseOrValue<string>,
      _kind: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    updateCollateral(
      _collateral: PromiseOrValue<string>,
      _params: DataTypes.CollateralStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSynth(
      _synth: PromiseOrValue<string>,
      _params: DataTypes.SynthStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      unwrap: PromiseOrValue<boolean>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeTokenUpdated(address)"(
      feeToken?: PromiseOrValue<string> | null
    ): FeeTokenUpdatedEventFilter;
    FeeTokenUpdated(
      feeToken?: PromiseOrValue<string> | null
    ): FeeTokenUpdatedEventFilter;

    "IssuerAllocUpdated(uint256)"(
      issuerAlloc?: null
    ): IssuerAllocUpdatedEventFilter;
    IssuerAllocUpdated(issuerAlloc?: null): IssuerAllocUpdatedEventFilter;

    "PriceOracleUpdated(address)"(
      priceOracle?: PromiseOrValue<string> | null
    ): PriceOracleUpdatedEventFilter;
    PriceOracleUpdated(
      priceOracle?: PromiseOrValue<string> | null
    ): PriceOracleUpdatedEventFilter;
  };

  estimateGas: {
    addSynth(
      _synth: PromiseOrValue<string>,
      _params: DataTypes.SynthStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burn(
      _synth: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositETH(
      _account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositWithPermit(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _approval: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterCollateral(
      _collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exitCollateral(
      _collateral: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountLiquidity(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalDebtUSD(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDebtUSD(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _synthIn: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _outAsset: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      _synth: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeSynth(
      _synth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      _synthIn: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _synthOut: PromiseOrValue<string>,
      _kind: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateCollateral(
      _collateral: PromiseOrValue<string>,
      _params: DataTypes.CollateralStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSynth(
      _synth: PromiseOrValue<string>,
      _params: DataTypes.SynthStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      unwrap: PromiseOrValue<boolean>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSynth(
      _synth: PromiseOrValue<string>,
      _params: DataTypes.SynthStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      _synth: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      _account: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      _approval: PromiseOrValue<BigNumberish>,
      _deadline: PromiseOrValue<BigNumberish>,
      _v: PromiseOrValue<BigNumberish>,
      _r: PromiseOrValue<BytesLike>,
      _s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterCollateral(
      _collateral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exitCollateral(
      _collateral: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountLiquidity(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalDebtUSD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserDebtUSD(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      _synthIn: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      _amountIn: PromiseOrValue<BigNumberish>,
      _outAsset: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      _synth: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeSynth(
      _synth: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      _synthIn: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _synthOut: PromiseOrValue<string>,
      _kind: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateCollateral(
      _collateral: PromiseOrValue<string>,
      _params: DataTypes.CollateralStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSynth(
      _synth: PromiseOrValue<string>,
      _params: DataTypes.SynthStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _collateral: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      unwrap: PromiseOrValue<boolean>,
      priceUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
