/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SynthPoolStorageInterface extends utils.Interface {
  functions: {
    "BASIS_POINTS()": FunctionFragment;
    "SCALER()": FunctionFragment;
    "WETH_ADDRESS()": FunctionFragment;
    "accountCollateralBalance(address,address)": FunctionFragment;
    "accountCollaterals(address,uint256)": FunctionFragment;
    "accountMembership(address,address)": FunctionFragment;
    "collaterals(address)": FunctionFragment;
    "feeToken()": FunctionFragment;
    "issuerAlloc()": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "synths(address)": FunctionFragment;
    "synthsList(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BASIS_POINTS"
      | "SCALER"
      | "WETH_ADDRESS"
      | "accountCollateralBalance"
      | "accountCollaterals"
      | "accountMembership"
      | "collaterals"
      | "feeToken"
      | "issuerAlloc"
      | "priceOracle"
      | "synths"
      | "synthsList"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "SCALER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountCollateralBalance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "accountCollaterals",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "accountMembership",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "collaterals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "feeToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "issuerAlloc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "synths",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "synthsList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "SCALER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountCollateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountCollaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collaterals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuerAlloc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "synths", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "synthsList", data: BytesLike): Result;

  events: {};
}

export interface SynthPoolStorage extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SynthPoolStorageInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<[BigNumber]>;

    SCALER(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    accountCollateralBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    accountCollaterals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    accountMembership(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    collaterals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isActive: boolean;
        cap: BigNumber;
        totalDeposits: BigNumber;
        baseLTV: BigNumber;
        liqThreshold: BigNumber;
        liqBonus: BigNumber;
      }
    >;

    feeToken(overrides?: CallOverrides): Promise<[string]>;

    issuerAlloc(overrides?: CallOverrides): Promise<[BigNumber]>;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    synths(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber] & {
        isActive: boolean;
        isDisabled: boolean;
        mintFee: BigNumber;
        burnFee: BigNumber;
      }
    >;

    synthsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

  SCALER(overrides?: CallOverrides): Promise<BigNumber>;

  WETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  accountCollateralBalance(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  accountCollaterals(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  accountMembership(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  collaterals(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      isActive: boolean;
      cap: BigNumber;
      totalDeposits: BigNumber;
      baseLTV: BigNumber;
      liqThreshold: BigNumber;
      liqBonus: BigNumber;
    }
  >;

  feeToken(overrides?: CallOverrides): Promise<string>;

  issuerAlloc(overrides?: CallOverrides): Promise<BigNumber>;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  synths(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber] & {
      isActive: boolean;
      isDisabled: boolean;
      mintFee: BigNumber;
      burnFee: BigNumber;
    }
  >;

  synthsList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    SCALER(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    accountCollateralBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountCollaterals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    accountMembership(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    collaterals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        isActive: boolean;
        cap: BigNumber;
        totalDeposits: BigNumber;
        baseLTV: BigNumber;
        liqThreshold: BigNumber;
        liqBonus: BigNumber;
      }
    >;

    feeToken(overrides?: CallOverrides): Promise<string>;

    issuerAlloc(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    synths(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber] & {
        isActive: boolean;
        isDisabled: boolean;
        mintFee: BigNumber;
        burnFee: BigNumber;
      }
    >;

    synthsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<BigNumber>;

    SCALER(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    accountCollateralBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountCollaterals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    accountMembership(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collaterals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    feeToken(overrides?: CallOverrides): Promise<BigNumber>;

    issuerAlloc(overrides?: CallOverrides): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    synths(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    synthsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BASIS_POINTS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SCALER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accountCollateralBalance(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountCollaterals(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accountMembership(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collaterals(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    issuerAlloc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    synths(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    synthsList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
