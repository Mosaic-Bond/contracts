/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CollateralLogicInterface extends utils.Interface {
  functions: {};

  events: {
    "CollateralEntered(address,address)": EventFragment;
    "CollateralExited(address,address)": EventFragment;
    "CollateralParamsUpdated(address,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollateralEntered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralExited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralParamsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface CollateralEnteredEventObject {
  user: string;
  collateral: string;
}
export type CollateralEnteredEvent = TypedEvent<
  [string, string],
  CollateralEnteredEventObject
>;

export type CollateralEnteredEventFilter =
  TypedEventFilter<CollateralEnteredEvent>;

export interface CollateralExitedEventObject {
  user: string;
  collateral: string;
}
export type CollateralExitedEvent = TypedEvent<
  [string, string],
  CollateralExitedEventObject
>;

export type CollateralExitedEventFilter =
  TypedEventFilter<CollateralExitedEvent>;

export interface CollateralParamsUpdatedEventObject {
  asset: string;
  cap: BigNumber;
  baseLTV: BigNumber;
  liqThreshold: BigNumber;
  liqBonus: BigNumber;
  isEnabled: boolean;
}
export type CollateralParamsUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, boolean],
  CollateralParamsUpdatedEventObject
>;

export type CollateralParamsUpdatedEventFilter =
  TypedEventFilter<CollateralParamsUpdatedEvent>;

export interface DepositEventObject {
  user: string;
  asset: string;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface WithdrawEventObject {
  user: string;
  asset: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface CollateralLogic extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CollateralLogicInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "CollateralEntered(address,address)"(
      user?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null
    ): CollateralEnteredEventFilter;
    CollateralEntered(
      user?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null
    ): CollateralEnteredEventFilter;

    "CollateralExited(address,address)"(
      user?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null
    ): CollateralExitedEventFilter;
    CollateralExited(
      user?: PromiseOrValue<string> | null,
      collateral?: PromiseOrValue<string> | null
    ): CollateralExitedEventFilter;

    "CollateralParamsUpdated(address,uint256,uint256,uint256,uint256,bool)"(
      asset?: PromiseOrValue<string> | null,
      cap?: null,
      baseLTV?: null,
      liqThreshold?: null,
      liqBonus?: null,
      isEnabled?: null
    ): CollateralParamsUpdatedEventFilter;
    CollateralParamsUpdated(
      asset?: PromiseOrValue<string> | null,
      cap?: null,
      baseLTV?: null,
      liqThreshold?: null,
      liqBonus?: null,
      isEnabled?: null
    ): CollateralParamsUpdatedEventFilter;

    "Deposit(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null
    ): DepositEventFilter;

    "Withdraw(address,address,uint256)"(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: PromiseOrValue<string> | null,
      asset?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
